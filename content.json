{"meta":{"title":"博客","subtitle":null,"description":null,"author":"pit","url":"http://yoursite.com","root":"/"},"pages":[{},{}],"posts":[{"title":"Maven","date":"2019-05-16T04:04:44.000Z","path":"Maven/","text":"","raw":"---\ntitle: Maven\ndate: 2019-05-16 12:04:44\ncategories:\n- 工具\ntags:\n- maven\n- jar\n---\n","content":"","slug":"Maven","updated":"2019-05-16T04:05:18.043Z","link":"","permalink":"http://yoursite.com/Maven/","excerpt":"","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://yoursite.com/tags/maven/"},{"name":"jar","slug":"jar","permalink":"http://yoursite.com/tags/jar/"}]},{"title":"Java基础","date":"2019-05-16T02:52:47.000Z","path":"Java基础/","text":"","raw":"---\ntitle: Java基础\ndate: 2019-05-16 10:52:47\ncategories:\n- Java\ntags:\n- 基础\ntoc: true\n---\n","content":"","slug":"Java基础","updated":"2019-05-16T05:25:21.142Z","link":"","permalink":"http://yoursite.com/Java基础/","excerpt":"","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"基础","slug":"基础","permalink":"http://yoursite.com/tags/基础/"}]},{"title":"Python基础","date":"2019-05-16T02:52:39.000Z","path":"Python基础/","text":"","raw":"---\ntitle: Python基础\ndate: 2019-05-16 10:52:39\ncategories:\n- Python\ntags:\n- 基础\n---\n","content":"","slug":"Python基础","updated":"2019-05-17T02:44:44.291Z","link":"","permalink":"http://yoursite.com/Python基础/","excerpt":"","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"基础","slug":"基础","permalink":"http://yoursite.com/tags/基础/"}]},{"title":"基于统计的分词实现","date":"2019-05-16T01:46:52.000Z","path":"基于统计的分词实现/","text":"统计分词的主要思想是把每个词看做是由字组成的，如果相连的字在不同文本中出现的次数越多，就证明这段相连的字很有可能就是一个词。 隐含马尔可夫模型（HMM） 隐含马尔可夫模型（HMM）是将分词作为字在句子中的序列标注任务来实现的。 基本思路是：每个字在构造一个特定词语时都占据着一个特定的位置即词位，一般采用四结构词位：B（词首），M（词中），E（词尾）和S（单独成词）。 其中，词位序列代表着HMM中不可见的隐藏状态序列，而训练集中的文本则为可见的观测序列。这样就变成了已知观测序列，求未知的隐藏序列的HMM问题。 HMM 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116class HMM: def __init__(self): # 词语状态标签 B-k*M-E(2个字及以上词语) S(1个字的词语) self.state_list = ['B', 'M', 'E', 'S'] self.start_probability = &#123;&#125; # 初始状态概率 self.trans_probability = &#123;&#125; # 转移概率 self.emit_probability = &#123;&#125; # 观测概率 def __load_corpus(self, file): with open(file, 'r', encoding='utf-8') as f: for l in f: # 将一行文本拆成词，按照词进行分析 text_list = l.strip().split() for text in text_list: if len(text) &gt; 0: word_list = [w for w in text] label_list = self.__make_label(text) assert len(word_list) == len(label_list) yield word_list, label_list @staticmethod def __make_label(text): if len(text) == 1: result = ['S'] else: result = ['B'] + ['M']*(len(text)-2) + ['E'] return result def train(self, corpus, model): state_num_dict = &#123;&#125; # 记录每种状态的总数，用来计算概率 start_num_dict = &#123;&#125; # 初始位置每种状态的数量 trans_num_dict = &#123;&#125; # 各种状态之间转移的数量 emit_num_dict = &#123;&#125; for state in self.state_list: state_num_dict[state] = 0 start_num_dict[state] = 0 trans_num_dict[state] = &#123;v: 0 for v in self.state_list&#125; emit_num_dict[state] = &#123;&#125; # 根据每个字的状态，统计数量 pre_state = 'B' for word_list, label_list in self.__load_corpus(corpus): for i, v in enumerate(label_list): state_num_dict[v] += 1 if i == 0: start_num_dict[v] += 1 trans_num_dict[pre_state][v] += 1 emit_num_dict[v][word_list[i]] = emit_num_dict[v].get(word_list[i], 0) + 1 pre_state = label_list[i] # print(sum(state_num_dict.values()), sum(start_num_dict.values())) # 根据数量 计算概率 初始状态概率 转移概率 观测概率 self.start_probability = &#123;k: v*1.0/sum(start_num_dict.values()) for k, v in start_num_dict.items()&#125; self.trans_probability = &#123;k: &#123;k1: v1*1.0/state_num_dict[k1] for k1, v1 in v.items()&#125; for k, v in trans_num_dict.items()&#125; self.emit_probability = &#123;k: &#123;k1: ((v1*1.0+1.0)/state_num_dict.get(k, 1.0)) for k1, v1 in v.items()&#125; for k, v in emit_num_dict.items()&#125; # 保存模型 with open(model, 'wb') as f: import pickle pickle.dump(self.start_probability, f) pickle.dump(self.trans_probability, f) pickle.dump(self.emit_probability, f) print(\"模型训练完成,保存在\", model) print(self.start_probability) print(self.trans_probability) print(self.emit_probability) def __viterbi(self, text=\"\"): O_ = text.strip() I_ = self.state_list A_ = self.trans_probability B_ = self.emit_probability pi_ = self.start_probability delta = [&#123;&#125; for _ in range(len(O_))] phi = [&#123;&#125; for _ in range(len(O_))] # 1.初始化 for i in I_: delta[0][i] = pi_[i]*B_[i].get(O_[0], 1.0) phi[0][i] = 'S' # 2.递推 for t in range(1, len(O_)): for i in I_: (delta[t][i], phi[t][i]) = max([(delta[t-1][j]*A_[j][i]*B_[i].get(O_[t], 1.0), j) for j in I_]) # 3.终止 P = [0]*len(O_) I = ['']*len(O_) P = [max([v for v in _delta.values()])for _delta in delta] i = delta[len(O_)-1] I[len(O_)-1] = max(i, key=i.get) # 4.最优路径回溯 for t in range(len(O_)-1, 0, -1): I[t-1] = phi[t][I[t]] return I def analyze(self, text, model): # 加载模型 with open(model, 'rb') as f: import pickle self.start_probability = pickle.load(f) self.trans_probability = pickle.load(f) self.emit_probability = pickle.load(f) label = self.__viterbi(text.strip()) for i, l in enumerate(label): if i != 0 and (l == 'B' or l == 'S'): print('/', end='') print(text[i], end='')if __name__ == '__main__': hmm = HMM() # hmm.train('pku_training.utf8.txt', 'hmm_model.pkl') # hmm.analyze(\"迈向充满希望的新世纪——一九九八年新年讲话\", 'hmm_model.pkl') hmm.analyze(\"我去北京四维图新大厦的路上经过火车站和天安门广场。\", 'hmm_model.pkl') 输出结果1我去/北京/四/维图/新/大厦/的/路/上/经过/火车/站/和/天/安门/广场。","raw":"---\ntitle: 基于统计的分词实现\ndate: 2019-05-16 09:46:52\ncategories:\n- 中文分词\ntags:\n- HMM\n---\n\n统计分词的主要思想是把每个词看做是由字组成的，如果相连的字在不同文本中出现的次数越多，就证明这段相连的字很有可能就是一个词。\n\n- 隐含马尔可夫模型（HMM）\n\n<!--more-->\n\n隐含马尔可夫模型（HMM）是将分词作为字在句子中的序列标注任务来实现的。\n\n基本思路是：每个字在构造一个特定词语时都占据着一个特定的位置即词位，一般采用四结构词位：B（词首），M（词中），E（词尾）和S（单独成词）。\n\n其中，词位序列代表着HMM中不可见的隐藏状态序列，而训练集中的文本则为可见的观测序列。这样就变成了已知观测序列，求未知的隐藏序列的HMM问题。\n\nHMM 代码实现\n``` python\nclass HMM:\n    def __init__(self):\n        # 词语状态标签 B-k*M-E(2个字及以上词语) S(1个字的词语)\n        self.state_list = ['B', 'M', 'E', 'S']\n        self.start_probability = {}  # 初始状态概率\n        self.trans_probability = {}  # 转移概率\n        self.emit_probability = {}  # 观测概率\n\n    def __load_corpus(self, file):\n        with open(file, 'r', encoding='utf-8') as f:\n            for l in f:\n                # 将一行文本拆成词，按照词进行分析\n                text_list = l.strip().split()\n                for text in text_list:\n                    if len(text) > 0:\n                        word_list = [w for w in text]\n                        label_list = self.__make_label(text)\n                        assert len(word_list) == len(label_list)\n                        yield word_list, label_list\n\n    @staticmethod\n    def __make_label(text):\n        if len(text) == 1:\n            result = ['S']\n        else:\n            result = ['B'] + ['M']*(len(text)-2) + ['E']\n        return result\n\n    def train(self, corpus, model):\n        state_num_dict = {}  # 记录每种状态的总数，用来计算概率\n        start_num_dict = {}  # 初始位置每种状态的数量\n        trans_num_dict = {}  # 各种状态之间转移的数量\n        emit_num_dict = {}\n\n        for state in self.state_list:\n            state_num_dict[state] = 0\n            start_num_dict[state] = 0\n            trans_num_dict[state] = {v: 0 for v in self.state_list}\n            emit_num_dict[state] = {}\n\n        # 根据每个字的状态，统计数量\n        pre_state = 'B'\n        for word_list, label_list in self.__load_corpus(corpus):\n            for i, v in enumerate(label_list):\n                state_num_dict[v] += 1\n                if i == 0:\n                    start_num_dict[v] += 1\n                trans_num_dict[pre_state][v] += 1\n                emit_num_dict[v][word_list[i]] = emit_num_dict[v].get(word_list[i], 0) + 1\n                pre_state = label_list[i]\n        # print(sum(state_num_dict.values()), sum(start_num_dict.values()))\n        # 根据数量 计算概率 初始状态概率 转移概率 观测概率\n        self.start_probability = {k: v*1.0/sum(start_num_dict.values()) for k, v in start_num_dict.items()}\n        self.trans_probability = {k: {k1: v1*1.0/state_num_dict[k1] for k1, v1 in v.items()}\n                                  for k, v in trans_num_dict.items()}\n        self.emit_probability = {k: {k1: ((v1*1.0+1.0)/state_num_dict.get(k, 1.0)) for k1, v1 in v.items()}\n                                 for k, v in emit_num_dict.items()}\n        # 保存模型\n        with open(model, 'wb') as f:\n            import pickle\n            pickle.dump(self.start_probability, f)\n            pickle.dump(self.trans_probability, f)\n            pickle.dump(self.emit_probability, f)\n        print(\"模型训练完成,保存在\", model)\n        print(self.start_probability)\n        print(self.trans_probability)\n        print(self.emit_probability)\n\n    def __viterbi(self, text=\"\"):\n        O_ = text.strip()\n        I_ = self.state_list\n        A_ = self.trans_probability\n        B_ = self.emit_probability\n        pi_ = self.start_probability\n\n        delta = [{} for _ in range(len(O_))]\n        phi = [{} for _ in range(len(O_))]\n        # 1.初始化\n        for i in I_:\n            delta[0][i] = pi_[i]*B_[i].get(O_[0], 1.0)\n            phi[0][i] = 'S'\n        # 2.递推\n        for t in range(1, len(O_)):\n            for i in I_:\n                (delta[t][i], phi[t][i]) = max([(delta[t-1][j]*A_[j][i]*B_[i].get(O_[t], 1.0), j) for j in I_])\n        # 3.终止\n        P = [0]*len(O_)\n        I = ['']*len(O_)\n        P = [max([v for v in _delta.values()])for _delta in delta]\n        i = delta[len(O_)-1]\n        I[len(O_)-1] = max(i, key=i.get)\n        # 4.最优路径回溯\n        for t in range(len(O_)-1, 0, -1):\n            I[t-1] = phi[t][I[t]]\n        return I\n\n    def analyze(self, text, model):\n        # 加载模型\n        with open(model, 'rb') as f:\n            import pickle\n            self.start_probability = pickle.load(f)\n            self.trans_probability = pickle.load(f)\n            self.emit_probability = pickle.load(f)\n\n        label = self.__viterbi(text.strip())\n        for i, l in enumerate(label):\n            if i != 0 and (l == 'B' or l == 'S'):\n                print('/', end='')\n            print(text[i], end='')\n\n\nif __name__ == '__main__':\n    hmm = HMM()\n    # hmm.train('pku_training.utf8.txt', 'hmm_model.pkl')\n    # hmm.analyze(\"迈向充满希望的新世纪——一九九八年新年讲话\", 'hmm_model.pkl')\n    hmm.analyze(\"我去北京四维图新大厦的路上经过火车站和天安门广场。\", 'hmm_model.pkl')\n```\n\n输出结果\n```text\n我去/北京/四/维图/新/大厦/的/路/上/经过/火车/站/和/天/安门/广场。\n```","content":"<p>统计分词的主要思想是把每个词看做是由字组成的，如果相连的字在不同文本中出现的次数越多，就证明这段相连的字很有可能就是一个词。</p>\n<ul>\n<li>隐含马尔可夫模型（HMM）</li>\n</ul>\n<a id=\"more\"></a>\n<p>隐含马尔可夫模型（HMM）是将分词作为字在句子中的序列标注任务来实现的。</p>\n<p>基本思路是：每个字在构造一个特定词语时都占据着一个特定的位置即词位，一般采用四结构词位：B（词首），M（词中），E（词尾）和S（单独成词）。</p>\n<p>其中，词位序列代表着HMM中不可见的隐藏状态序列，而训练集中的文本则为可见的观测序列。这样就变成了已知观测序列，求未知的隐藏序列的HMM问题。</p>\n<p>HMM 代码实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HMM</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 词语状态标签 B-k*M-E(2个字及以上词语) S(1个字的词语)</span></span><br><span class=\"line\">        self.state_list = [<span class=\"string\">'B'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'S'</span>]</span><br><span class=\"line\">        self.start_probability = &#123;&#125;  <span class=\"comment\"># 初始状态概率</span></span><br><span class=\"line\">        self.trans_probability = &#123;&#125;  <span class=\"comment\"># 转移概率</span></span><br><span class=\"line\">        self.emit_probability = &#123;&#125;  <span class=\"comment\"># 观测概率</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__load_corpus</span><span class=\"params\">(self, file)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(file, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">                <span class=\"comment\"># 将一行文本拆成词，按照词进行分析</span></span><br><span class=\"line\">                text_list = l.strip().split()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> text <span class=\"keyword\">in</span> text_list:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> len(text) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                        word_list = [w <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> text]</span><br><span class=\"line\">                        label_list = self.__make_label(text)</span><br><span class=\"line\">                        <span class=\"keyword\">assert</span> len(word_list) == len(label_list)</span><br><span class=\"line\">                        <span class=\"keyword\">yield</span> word_list, label_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__make_label</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(text) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            result = [<span class=\"string\">'S'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = [<span class=\"string\">'B'</span>] + [<span class=\"string\">'M'</span>]*(len(text)<span class=\"number\">-2</span>) + [<span class=\"string\">'E'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span><span class=\"params\">(self, corpus, model)</span>:</span></span><br><span class=\"line\">        state_num_dict = &#123;&#125;  <span class=\"comment\"># 记录每种状态的总数，用来计算概率</span></span><br><span class=\"line\">        start_num_dict = &#123;&#125;  <span class=\"comment\"># 初始位置每种状态的数量</span></span><br><span class=\"line\">        trans_num_dict = &#123;&#125;  <span class=\"comment\"># 各种状态之间转移的数量</span></span><br><span class=\"line\">        emit_num_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> state <span class=\"keyword\">in</span> self.state_list:</span><br><span class=\"line\">            state_num_dict[state] = <span class=\"number\">0</span></span><br><span class=\"line\">            start_num_dict[state] = <span class=\"number\">0</span></span><br><span class=\"line\">            trans_num_dict[state] = &#123;v: <span class=\"number\">0</span> <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> self.state_list&#125;</span><br><span class=\"line\">            emit_num_dict[state] = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 根据每个字的状态，统计数量</span></span><br><span class=\"line\">        pre_state = <span class=\"string\">'B'</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word_list, label_list <span class=\"keyword\">in</span> self.__load_corpus(corpus):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> enumerate(label_list):</span><br><span class=\"line\">                state_num_dict[v] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    start_num_dict[v] += <span class=\"number\">1</span></span><br><span class=\"line\">                trans_num_dict[pre_state][v] += <span class=\"number\">1</span></span><br><span class=\"line\">                emit_num_dict[v][word_list[i]] = emit_num_dict[v].get(word_list[i], <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">                pre_state = label_list[i]</span><br><span class=\"line\">        <span class=\"comment\"># print(sum(state_num_dict.values()), sum(start_num_dict.values()))</span></span><br><span class=\"line\">        <span class=\"comment\"># 根据数量 计算概率 初始状态概率 转移概率 观测概率</span></span><br><span class=\"line\">        self.start_probability = &#123;k: v*<span class=\"number\">1.0</span>/sum(start_num_dict.values()) <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> start_num_dict.items()&#125;</span><br><span class=\"line\">        self.trans_probability = &#123;k: &#123;k1: v1*<span class=\"number\">1.0</span>/state_num_dict[k1] <span class=\"keyword\">for</span> k1, v1 <span class=\"keyword\">in</span> v.items()&#125;</span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> trans_num_dict.items()&#125;</span><br><span class=\"line\">        self.emit_probability = &#123;k: &#123;k1: ((v1*<span class=\"number\">1.0</span>+<span class=\"number\">1.0</span>)/state_num_dict.get(k, <span class=\"number\">1.0</span>)) <span class=\"keyword\">for</span> k1, v1 <span class=\"keyword\">in</span> v.items()&#125;</span><br><span class=\"line\">                                 <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> emit_num_dict.items()&#125;</span><br><span class=\"line\">        <span class=\"comment\"># 保存模型</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(model, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">            pickle.dump(self.start_probability, f)</span><br><span class=\"line\">            pickle.dump(self.trans_probability, f)</span><br><span class=\"line\">            pickle.dump(self.emit_probability, f)</span><br><span class=\"line\">        print(<span class=\"string\">\"模型训练完成,保存在\"</span>, model)</span><br><span class=\"line\">        print(self.start_probability)</span><br><span class=\"line\">        print(self.trans_probability)</span><br><span class=\"line\">        print(self.emit_probability)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__viterbi</span><span class=\"params\">(self, text=<span class=\"string\">\"\"</span>)</span>:</span></span><br><span class=\"line\">        O_ = text.strip()</span><br><span class=\"line\">        I_ = self.state_list</span><br><span class=\"line\">        A_ = self.trans_probability</span><br><span class=\"line\">        B_ = self.emit_probability</span><br><span class=\"line\">        pi_ = self.start_probability</span><br><span class=\"line\"></span><br><span class=\"line\">        delta = [&#123;&#125; <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(O_))]</span><br><span class=\"line\">        phi = [&#123;&#125; <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(O_))]</span><br><span class=\"line\">        <span class=\"comment\"># 1.初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> I_:</span><br><span class=\"line\">            delta[<span class=\"number\">0</span>][i] = pi_[i]*B_[i].get(O_[<span class=\"number\">0</span>], <span class=\"number\">1.0</span>)</span><br><span class=\"line\">            phi[<span class=\"number\">0</span>][i] = <span class=\"string\">'S'</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.递推</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(O_)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> I_:</span><br><span class=\"line\">                (delta[t][i], phi[t][i]) = max([(delta[t<span class=\"number\">-1</span>][j]*A_[j][i]*B_[i].get(O_[t], <span class=\"number\">1.0</span>), j) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> I_])</span><br><span class=\"line\">        <span class=\"comment\"># 3.终止</span></span><br><span class=\"line\">        P = [<span class=\"number\">0</span>]*len(O_)</span><br><span class=\"line\">        I = [<span class=\"string\">''</span>]*len(O_)</span><br><span class=\"line\">        P = [max([v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> _delta.values()])<span class=\"keyword\">for</span> _delta <span class=\"keyword\">in</span> delta]</span><br><span class=\"line\">        i = delta[len(O_)<span class=\"number\">-1</span>]</span><br><span class=\"line\">        I[len(O_)<span class=\"number\">-1</span>] = max(i, key=i.get)</span><br><span class=\"line\">        <span class=\"comment\"># 4.最优路径回溯</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(len(O_)<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            I[t<span class=\"number\">-1</span>] = phi[t][I[t]]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> I</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">analyze</span><span class=\"params\">(self, text, model)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(model, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">            self.start_probability = pickle.load(f)</span><br><span class=\"line\">            self.trans_probability = pickle.load(f)</span><br><span class=\"line\">            self.emit_probability = pickle.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\">        label = self.__viterbi(text.strip())</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != <span class=\"number\">0</span> <span class=\"keyword\">and</span> (l == <span class=\"string\">'B'</span> <span class=\"keyword\">or</span> l == <span class=\"string\">'S'</span>):</span><br><span class=\"line\">                print(<span class=\"string\">'/'</span>, end=<span class=\"string\">''</span>)</span><br><span class=\"line\">            print(text[i], end=<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    hmm = HMM()</span><br><span class=\"line\">    <span class=\"comment\"># hmm.train('pku_training.utf8.txt', 'hmm_model.pkl')</span></span><br><span class=\"line\">    <span class=\"comment\"># hmm.analyze(\"迈向充满希望的新世纪——一九九八年新年讲话\", 'hmm_model.pkl')</span></span><br><span class=\"line\">    hmm.analyze(<span class=\"string\">\"我去北京四维图新大厦的路上经过火车站和天安门广场。\"</span>, <span class=\"string\">'hmm_model.pkl'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我去/北京/四/维图/新/大厦/的/路/上/经过/火车/站/和/天/安门/广场。</span><br></pre></td></tr></table></figure></p>\n","slug":"基于统计的分词实现","updated":"2019-05-17T02:44:38.559Z","link":"","permalink":"http://yoursite.com/基于统计的分词实现/","excerpt":"统计分词的主要思想是把每个词看做是由字组成的，如果相连的字在不同文本中出现的次数越多，就证明这段相连的字很有可能就是一个词。 隐含马尔可夫模型（HMM）","categories":[{"name":"中文分词","slug":"中文分词","permalink":"http://yoursite.com/categories/中文分词/"}],"tags":[{"name":"HMM","slug":"HMM","permalink":"http://yoursite.com/tags/HMM/"}]},{"title":"Vertbi算法","date":"2019-05-15T11:22:55.000Z","path":"Vertbi算法/","text":"维特比算法 代码实现 维特比算法 代码实现12345678910111213141516171819202122232425262728293031def __viterbi(): O_ = [0, 1, 0] I_ = [0, 1, 2] A_ = [[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]] B_ = [[0.5, 0.5], [0.4, 0.6], [0.7, 0.3]] pi_ = [0.2, 0.4, 0.4] delta = [&#123;&#125; for _ in range(len(O_))] phi = [&#123;&#125; for _ in range(len(O_))] # 1.初始化 for i in I_: delta[0][i] = pi_[i]*B_[i][O_[0]] phi[0][i] = 0 # 2.递推 for t in range(1, len(O_)): for i in I_: (delta[t][i], phi[t][i]) = max([(delta[t-1][j]*A_[j][i]*B_[i][O_[t]], j) for j in I_]) # 3.终止 P = [0]*len(O_) I = [0]*len(O_) P = [max([v for v in _delta.values()])for _delta in delta] i = delta[len(O_)-1] I[len(O_)-1] = max(i, key=i.get) # 4.最优路径回溯 for t in range(len(O_)-1, 0, -1): I[t-1] = phi[t][I[t]] print(I) # 输出[2, 2, 2]","raw":"---\ntitle: Vertbi算法\ndate: 2019-05-15 19:22:55\ncategories:\n- 算法\ntags:\n- 维特比\n---\n\n- 维特比算法 代码实现\n\n<!--more-->\n\n维特比算法 代码实现\n```python\ndef __viterbi():\n    O_ = [0, 1, 0]\n    I_ = [0, 1, 2]\n    A_ = [[0.5, 0.2, 0.3],\n        [0.3, 0.5, 0.2],\n        [0.2, 0.3, 0.5]]\n    B_ = [[0.5, 0.5],\n        [0.4, 0.6],\n        [0.7, 0.3]]\n    pi_ = [0.2, 0.4, 0.4]\n\n    delta = [{} for _ in range(len(O_))]\n    phi = [{} for _ in range(len(O_))]\n    # 1.初始化\n    for i in I_:\n        delta[0][i] = pi_[i]*B_[i][O_[0]]\n        phi[0][i] = 0\n    # 2.递推\n    for t in range(1, len(O_)):\n        for i in I_:\n            (delta[t][i], phi[t][i]) = max([(delta[t-1][j]*A_[j][i]*B_[i][O_[t]], j) for j in I_])\n    # 3.终止\n    P = [0]*len(O_)\n    I = [0]*len(O_)\n    P = [max([v for v in _delta.values()])for _delta in delta]\n    i = delta[len(O_)-1]\n    I[len(O_)-1] = max(i, key=i.get)\n    # 4.最优路径回溯\n    for t in range(len(O_)-1, 0, -1):\n        I[t-1] = phi[t][I[t]]\n    print(I)  # 输出[2, 2, 2]\n```","content":"<ul>\n<li>维特比算法 代码实现</li>\n</ul>\n<a id=\"more\"></a>\n<p>维特比算法 代码实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__viterbi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    O_ = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    I_ = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">    A_ = [[<span class=\"number\">0.5</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.3</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.2</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>, <span class=\"number\">0.5</span>]]</span><br><span class=\"line\">    B_ = [[<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.4</span>, <span class=\"number\">0.6</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.7</span>, <span class=\"number\">0.3</span>]]</span><br><span class=\"line\">    pi_ = [<span class=\"number\">0.2</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    delta = [&#123;&#125; <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(O_))]</span><br><span class=\"line\">    phi = [&#123;&#125; <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(O_))]</span><br><span class=\"line\">    <span class=\"comment\"># 1.初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> I_:</span><br><span class=\"line\">        delta[<span class=\"number\">0</span>][i] = pi_[i]*B_[i][O_[<span class=\"number\">0</span>]]</span><br><span class=\"line\">        phi[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 2.递推</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(O_)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> I_:</span><br><span class=\"line\">            (delta[t][i], phi[t][i]) = max([(delta[t<span class=\"number\">-1</span>][j]*A_[j][i]*B_[i][O_[t]], j) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> I_])</span><br><span class=\"line\">    <span class=\"comment\"># 3.终止</span></span><br><span class=\"line\">    P = [<span class=\"number\">0</span>]*len(O_)</span><br><span class=\"line\">    I = [<span class=\"number\">0</span>]*len(O_)</span><br><span class=\"line\">    P = [max([v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> _delta.values()])<span class=\"keyword\">for</span> _delta <span class=\"keyword\">in</span> delta]</span><br><span class=\"line\">    i = delta[len(O_)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    I[len(O_)<span class=\"number\">-1</span>] = max(i, key=i.get)</span><br><span class=\"line\">    <span class=\"comment\"># 4.最优路径回溯</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(len(O_)<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        I[t<span class=\"number\">-1</span>] = phi[t][I[t]]</span><br><span class=\"line\">    print(I)  <span class=\"comment\"># 输出[2, 2, 2]</span></span><br></pre></td></tr></table></figure></p>\n","slug":"Vertbi算法","updated":"2019-05-17T02:58:29.742Z","link":"","permalink":"http://yoursite.com/Vertbi算法/","excerpt":"维特比算法 代码实现","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"维特比","slug":"维特比","permalink":"http://yoursite.com/tags/维特比/"}]},{"title":"SQL相关","date":"2019-05-15T11:10:23.000Z","path":"SQL相关/","text":"SQL的分类 SQL的分类（1）、数据库查询语句（DQL）简称：DQL，Data Query Language代表关键字：select （2）、数据库操作语言（DML）简称：DML，Data Manipulation Language代表关键字：insert、delete 、update增、删、改表中的数据 （3）、数据库定义语言（DDL）简称：DDL，Data Denifition Language代表关键字：create、drop、alter创建、删除、修改表的结构 （4）、事务控制语言（TCL）简称：TCL，Trasactional Control Language代表关键字：commit、rollback （5）、数据控制语言（DCL）简称：DCL，Data Control Language代表关键字：grant、revoke （6）、DML与DDL的区别是什么DML是修改数据库表中的数据，而DDL是修改数据中表的结构； 参考资料OceanBase CSDN Mysql表的定义&amp;&amp;SQL的分类","raw":"---\ntitle: SQL相关\ndate: 2019-05-15 19:10:23\ncategories:\n- 工具\ntags:\n- sql\ntoc: true\n---\n\n- SQL的分类\n\n<!--more-->\n\n## SQL的分类\n\n### （1）、数据库查询语句（DQL）\n简称：DQL，Data Query Language\n代表关键字：select\n\n### （2）、数据库操作语言（DML）\n简称：DML，Data Manipulation Language\n代表关键字：insert、delete 、update增、删、改表中的数据\n\n### （3）、数据库定义语言（DDL）\n简称：DDL，Data Denifition Language\n代表关键字：create、drop、alter创建、删除、修改表的结构\n\n### （4）、事务控制语言（TCL）\n简称：TCL，Trasactional Control Language\n代表关键字：commit、rollback\n\n### （5）、数据控制语言（DCL）\n简称：DCL，Data Control Language\n代表关键字：grant、revoke\n\n### （6）、DML与DDL的区别是什么\nDML是修改数据库表中的数据，而DDL是修改数据中表的结构；\n\n\n\n\n### 参考资料\n*OceanBase* [CSDN Mysql表的定义&&SQL的分类](https://blog.csdn.net/qq_37923253/article/details/79604016)\n\n","content":"<ul>\n<li>SQL的分类</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"SQL的分类\"><a href=\"#SQL的分类\" class=\"headerlink\" title=\"SQL的分类\"></a>SQL的分类</h2><h3 id=\"（1）、数据库查询语句（DQL）\"><a href=\"#（1）、数据库查询语句（DQL）\" class=\"headerlink\" title=\"（1）、数据库查询语句（DQL）\"></a>（1）、数据库查询语句（DQL）</h3><p>简称：DQL，Data Query Language<br>代表关键字：select</p>\n<h3 id=\"（2）、数据库操作语言（DML）\"><a href=\"#（2）、数据库操作语言（DML）\" class=\"headerlink\" title=\"（2）、数据库操作语言（DML）\"></a>（2）、数据库操作语言（DML）</h3><p>简称：DML，Data Manipulation Language<br>代表关键字：insert、delete 、update增、删、改表中的数据</p>\n<h3 id=\"（3）、数据库定义语言（DDL）\"><a href=\"#（3）、数据库定义语言（DDL）\" class=\"headerlink\" title=\"（3）、数据库定义语言（DDL）\"></a>（3）、数据库定义语言（DDL）</h3><p>简称：DDL，Data Denifition Language<br>代表关键字：create、drop、alter创建、删除、修改表的结构</p>\n<h3 id=\"（4）、事务控制语言（TCL）\"><a href=\"#（4）、事务控制语言（TCL）\" class=\"headerlink\" title=\"（4）、事务控制语言（TCL）\"></a>（4）、事务控制语言（TCL）</h3><p>简称：TCL，Trasactional Control Language<br>代表关键字：commit、rollback</p>\n<h3 id=\"（5）、数据控制语言（DCL）\"><a href=\"#（5）、数据控制语言（DCL）\" class=\"headerlink\" title=\"（5）、数据控制语言（DCL）\"></a>（5）、数据控制语言（DCL）</h3><p>简称：DCL，Data Control Language<br>代表关键字：grant、revoke</p>\n<h3 id=\"（6）、DML与DDL的区别是什么\"><a href=\"#（6）、DML与DDL的区别是什么\" class=\"headerlink\" title=\"（6）、DML与DDL的区别是什么\"></a>（6）、DML与DDL的区别是什么</h3><p>DML是修改数据库表中的数据，而DDL是修改数据中表的结构；</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><em>OceanBase</em> <a href=\"https://blog.csdn.net/qq_37923253/article/details/79604016\" target=\"_blank\" rel=\"noopener\">CSDN Mysql表的定义&amp;&amp;SQL的分类</a></p>\n","slug":"SQL相关","updated":"2019-05-17T02:59:31.994Z","link":"","permalink":"http://yoursite.com/SQL相关/","excerpt":"SQL的分类","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://yoursite.com/tags/sql/"}]},{"title":"Java避坑","date":"2019-05-14T10:41:31.000Z","path":"Java避坑/","text":"记录一些Java编程的经验教训 自动拆装箱与缓存在Java 5中，在Integer的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。 适用于整数值区间-128 至 +127。 只适用于自动装箱。使用构造函数创建对象不适用。 Java SE的自动拆装箱还提供了一个和缓存有关的功能，我们先来看以下代码，猜测一下输出结果：123456789101112131415161718public static void main(String... strings) &#123; Integer integer1 = 3; Integer integer2 = 3; if (integer1 == integer2) System.out.println(\"integer1 == integer2\"); else System.out.println(\"integer1 != integer2\"); Integer integer3 = 300; Integer integer4 = 300; if (integer3 == integer4) System.out.println(\"integer3 == integer4\"); else System.out.println(\"integer3 != integer4\"); &#125; 我们普遍认为上面的两个判断的结果都是false。虽然比较的值是相等的，但是由于比较的是对象，而对象的引用不一样，所以会认为两个if判断都是false的。在Java中，==比较的是对象应用，而equals比较的是值。所以，在这个例子中，不同的对象有不同的引用，所以在进行比较的时候都将返回false。奇怪的是，这里两个类似的if条件判断返回不同的布尔值。 上面这段代码真正的输出结果：(原因就和Integer中的缓存机制有关。) 12integer1 == integer2integer3 != integer4 我们只需要知道，当需要进行自动装箱时，如果数字在-128至127之间时，会直接使用缓存中的对象，而不是重新创建一个对象。 其中的javadoc详细的说明了缓存支持-128到127之间的自动装箱过程。最大值127可以通过-XX:AutoBoxCacheMax=size修改。 实际上这个功能在Java 5中引入的时候,范围是固定的-128 至 +127。后来在Java 6中，可以通过java.lang.Integer.IntegerCache.high设置最大值。 参考资料hollischuang GitHub To Be Top Javaer - Java工程师成神之路","raw":"---\ntitle: Java避坑\ndate: 2019-05-14 18:41:31\ncategories:\n- Java\ntags:\n- 经验\ntoc: true\n---\n\n记录一些Java编程的经验教训\n\n<!--more-->\n\n### 自动拆装箱与缓存\n\n在Java 5中，在Integer的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。\n\n> 适用于整数值区间-128 至 +127。\n> \n> 只适用于自动装箱。使用构造函数创建对象不适用。\n\nJava SE的自动拆装箱还提供了一个和缓存有关的功能，我们先来看以下代码，猜测一下输出结果：\n``` java\npublic static void main(String... strings) {\n    \n        Integer integer1 = 3;\n        Integer integer2 = 3;\n    \n        if (integer1 == integer2)\n            System.out.println(\"integer1 == integer2\");\n        else\n            System.out.println(\"integer1 != integer2\");\n    \n        Integer integer3 = 300;\n        Integer integer4 = 300;\n    \n        if (integer3 == integer4)\n            System.out.println(\"integer3 == integer4\");\n        else\n            System.out.println(\"integer3 != integer4\");\n    }\n```\n我们普遍认为上面的两个判断的结果都是false。虽然比较的值是相等的，但是由于比较的是对象，而对象的引用不一样，所以会认为两个if判断都是false的。在Java中，==比较的是对象应用，而equals比较的是值。所以，在这个例子中，不同的对象有不同的引用，所以在进行比较的时候都将返回false。奇怪的是，这里两个类似的if条件判断返回不同的布尔值。\n\n上面这段代码真正的输出结果：(原因就和Integer中的缓存机制有关。)\n\n```text\ninteger1 == integer2\ninteger3 != integer4\n```\n\n我们只需要知道，当需要进行自动装箱时，如果数字在-128至127之间时，会直接使用缓存中的对象，而不是重新创建一个对象。\n\n其中的javadoc详细的说明了缓存支持-128到127之间的自动装箱过程。最大值127可以通过-XX:AutoBoxCacheMax=size修改。\n\n实际上这个功能在Java 5中引入的时候,范围是固定的-128 至 +127。后来在**Java 6**中，可以通过**java.lang.Integer.IntegerCache.high**设置最大值。\n\n### 参考资料\n*hollischuang* [GitHub To Be Top Javaer - Java工程师成神之路](https://github.com/hollischuang/toBeTopJavaer?utm_source=gold_browser_extension)\n","content":"<p>记录一些Java编程的经验教训</p>\n<a id=\"more\"></a>\n<h3 id=\"自动拆装箱与缓存\"><a href=\"#自动拆装箱与缓存\" class=\"headerlink\" title=\"自动拆装箱与缓存\"></a>自动拆装箱与缓存</h3><p>在Java 5中，在Integer的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。</p>\n<blockquote>\n<p>适用于整数值区间-128 至 +127。</p>\n<p>只适用于自动装箱。使用构造函数创建对象不适用。</p>\n</blockquote>\n<p>Java SE的自动拆装箱还提供了一个和缓存有关的功能，我们先来看以下代码，猜测一下输出结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... strings)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        Integer integer1 = <span class=\"number\">3</span>;</span><br><span class=\"line\">        Integer integer2 = <span class=\"number\">3</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integer1 == integer2)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"integer1 == integer2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"integer1 != integer2\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        Integer integer3 = <span class=\"number\">300</span>;</span><br><span class=\"line\">        Integer integer4 = <span class=\"number\">300</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integer3 == integer4)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"integer3 == integer4\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"integer3 != integer4\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们普遍认为上面的两个判断的结果都是false。虽然比较的值是相等的，但是由于比较的是对象，而对象的引用不一样，所以会认为两个if判断都是false的。在Java中，==比较的是对象应用，而equals比较的是值。所以，在这个例子中，不同的对象有不同的引用，所以在进行比较的时候都将返回false。奇怪的是，这里两个类似的if条件判断返回不同的布尔值。</p>\n<p>上面这段代码真正的输出结果：(原因就和Integer中的缓存机制有关。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">integer1 == integer2</span><br><span class=\"line\">integer3 != integer4</span><br></pre></td></tr></table></figure>\n<p>我们只需要知道，当需要进行自动装箱时，如果数字在-128至127之间时，会直接使用缓存中的对象，而不是重新创建一个对象。</p>\n<p>其中的javadoc详细的说明了缓存支持-128到127之间的自动装箱过程。最大值127可以通过-XX:AutoBoxCacheMax=size修改。</p>\n<p>实际上这个功能在Java 5中引入的时候,范围是固定的-128 至 +127。后来在<strong>Java 6</strong>中，可以通过<strong>java.lang.Integer.IntegerCache.high</strong>设置最大值。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><em>hollischuang</em> <a href=\"https://github.com/hollischuang/toBeTopJavaer?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">GitHub To Be Top Javaer - Java工程师成神之路</a></p>\n","slug":"Java避坑","updated":"2019-05-21T01:40:26.367Z","link":"","permalink":"http://yoursite.com/Java避坑/","excerpt":"记录一些Java编程的经验教训","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"经验","slug":"经验","permalink":"http://yoursite.com/tags/经验/"}]},{"title":"Python避坑","date":"2019-05-09T06:34:43.000Z","path":"Python避坑/","text":"记录一些Python编程的经验教训 codecs.open和open的区别 Python3直接用open。 Python2.x下用codecs.open，特别是有中文的情况，然后也可以避免踩到2.6下面io.open的坑。 如果希望代码同时兼容Python2和Python3，那么推荐用codecs.open。 资料百度知道","raw":"---\ntitle: Python避坑\ndate: 2019-05-09 14:34:43\ncategories:\n- Python\ntags:\n- 经验\n---\n\n记录一些Python编程的经验教训\n\n<!--more-->\n\n### codecs.open和open的区别\n\n{% blockquote 资料 https://zhidao.baidu.com/question/1823800427851275948.html 百度知道 %}\n- Python3直接用open。\n- Python2.x下用codecs.open，特别是有中文的情况，然后也可以避免踩到2.6下面io.open的坑。\n- 如果希望代码同时兼容Python2和Python3，那么推荐用codecs.open。\n{% endblockquote %}\n\n\n","content":"<p>记录一些Python编程的经验教训</p>\n<a id=\"more\"></a>\n<h3 id=\"codecs-open和open的区别\"><a href=\"#codecs-open和open的区别\" class=\"headerlink\" title=\"codecs.open和open的区别\"></a>codecs.open和open的区别</h3><blockquote><ul>\n<li>Python3直接用open。</li>\n<li>Python2.x下用codecs.open，特别是有中文的情况，然后也可以避免踩到2.6下面io.open的坑。</li>\n<li>如果希望代码同时兼容Python2和Python3，那么推荐用codecs.open。</li>\n</ul>\n<footer><strong>资料</strong><cite><a href=\"https://zhidao.baidu.com/question/1823800427851275948.html\" target=\"_blank\" rel=\"noopener\">百度知道</a></cite></footer></blockquote>\n","slug":"Python避坑","updated":"2019-05-16T05:59:38.730Z","link":"","permalink":"http://yoursite.com/Python避坑/","excerpt":"记录一些Python编程的经验教训","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"经验","slug":"经验","permalink":"http://yoursite.com/tags/经验/"}]},{"title":"基于规则的分词实现","date":"2019-05-09T05:39:56.000Z","path":"基于规则的分词实现/","text":"最大匹配法（MM）实现案例 逆向最大匹配法（RMM） 实现案例 准备文件词典文件word.txt12345678910北京天安门四维图新大厦广场路上前往火车站公司经过 停用词文件stoplis.txt12345678@#￥%&amp;_=+ 最大匹配法（MM）实现案例最大匹配法 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import codecsclass MM: def __init__(self): self.dic = &#123;&#125; self.stoplis = &#123;&#125; self.load() self.max_chars = 0 # 遍历分词字典，获得最大分词长度 for key in self.dic: if len(key) &gt; self.max_chars: self.max_chars = len(key) # map写法 # self.max_chars = max(map(len, [x for x in self.dic])) def load(self): # 获得分词字典，存储为字典形式 f1 = codecs.open('words.txt', 'r', encoding='utf8') while 1: line = f1.readline() if len(line) == 0: break term = line.strip().replace('\\r\\n', '') # 去除字符串两侧的换行符，避免取最大分词长度时出差错 self.dic[term] = 1 f1.close # 获得停用词典，存储为字典形式 f2 = codecs.open('stoplis.txt', 'r', encoding='utf8') while 1: line = f2.readline() if len(line) == 0: break term = line.strip() self.stoplis[term] = 1 f2.close # 正向最大匹配分词算法 def analyze(self, chars): # 获得需要分词的文本，为字符串形式 # 去除字符串两侧的换行符，避免截词时出差错 chars = chars.strip().replace('\\r\\n', '') # 定义一个空列表来存储分词结果 words = [] n = 0 while n &lt; len(chars): matched = 0 for i in range(self.max_chars, 0, -1): s = chars[n:n + i] # 判断所截取字符串是否在分词词典和停用词典内 if s in self.dic: if s in self.stoplis: matched = 1 n = n + i break else: words.append(s) matched = 1 n = n + i break if s in self.stoplis: matched = 1 n = n + i break if not matched: words.append(chars[n]) n = n + 1 print(\"/\".join(words))if __name__ == '__main__': mm = MM() mm.analyze(\"我去北京四维图新大厦的路上经过@火车站和@天安门广场。\") 测试结果1我/去/北京/四维图新/大厦/的/路上/经过/火车站/和/天安门/广场/。 逆向最大匹配法（RMM） 实现案例逆向最大匹配法 实现代码python1234567891011121314151617181920212223242526272829303132333435363738394041424344class RMM: def __init__(self, word_dict, stop_dict): self.word_dict = word_dict self.stop_dict = stop_dict # 扫描窗口大小,由最大单词长度决定 self.window_max_size = self.__getMaxLen() def __getMaxLen(self): return max(map(len, [word for word in self.word_dict])) def analyze(self, text): result = [] index = len(text) # 判断位置 while index &gt; 0: # 判断位置从后向前移动，当位置太靠前时，窗口需要结合实际缩小 window_size = min(index, self.window_max_size) for size in range(window_size, 0, -1): piece = text[index-size: index] if piece in self.stop_dict: index = index - size + 1 piece = \"-*-停止词-*-\" break elif piece in self.word_dict: index = index - size + 1 break index = index - 1 result.append(piece) # 因为是从后向前切分的,保存结果顺序需要反转 result.reverse() return resultif __name__ == '__main__': words = set() stops = set() with open('words.txt', 'r') as f: for w in f: words.add(w.strip()) with open('stoplis.txt', 'r') as f: for w in f: stops.add(w.strip()) rmm = RMM(words, stops) res = rmm.analyze(\"我去北京四维图新大厦的路上经过@火车站和@天安门广场。\") print(\"/\".join([w for w in res if w != \"-*-停止词-*-\"])) 测试结果1我/去/北京/四维图新/大厦/的/路上/经过/火车站/和/天安门/广场/。","raw":"---\ntitle: 基于规则的分词实现\ndate: 2019-05-09 13:39:56\ncategories:\n- 中文分词\ntags:\n- 最大匹配法\ntoc: true\nupdated: 2019-05-16 10:46:52\n---\n\n- 最大匹配法（MM）实现案例\n- 逆向最大匹配法（RMM） 实现案例\n\n<!--more-->\n\n### 准备文件\n\n词典文件\n```text word.txt\n北京\n天安门\n四维图新\n大厦\n广场\n路上\n前往\n火车站\n公司\n经过\n```\n\n停用词文件\n```text stoplis.txt\n@\n#\n￥\n%\n&\n_\n=\n+\n```\n\n### 最大匹配法（MM）实现案例\n\n最大匹配法 代码实现\n```python\nimport codecs\n\n\nclass MM:\n    def __init__(self):\n        self.dic = {}\n        self.stoplis = {}\n        self.load()\n        self.max_chars = 0 # 遍历分词字典，获得最大分词长度\n        for key in self.dic:\n            if len(key) > self.max_chars:\n                self.max_chars = len(key)\n        # map写法\n        # self.max_chars = max(map(len, [x for x in self.dic]))\n    \n    def load(self):\n        # 获得分词字典，存储为字典形式\n        f1 = codecs.open('words.txt', 'r', encoding='utf8')\n        while 1:\n            line = f1.readline()\n            if len(line) == 0:\n                break\n            term = line.strip().replace('\\r\\n', '')  # 去除字符串两侧的换行符，避免取最大分词长度时出差错\n            self.dic[term] = 1\n        f1.close\n        # 获得停用词典，存储为字典形式\n        f2 = codecs.open('stoplis.txt', 'r', encoding='utf8')\n        while 1:\n            line = f2.readline()\n            if len(line) == 0:\n                break\n            term = line.strip()\n            self.stoplis[term] = 1\n        f2.close\n\n    # 正向最大匹配分词算法\n    def analyze(self, chars):\n        # 获得需要分词的文本，为字符串形式\n        # 去除字符串两侧的换行符，避免截词时出差错 \n        chars = chars.strip().replace('\\r\\n', '')  \n        # 定义一个空列表来存储分词结果\n        words = []\n        n = 0\n        while n < len(chars):\n            matched = 0\n            for i in range(self.max_chars, 0, -1):\n                s = chars[n:n + i]\n                # 判断所截取字符串是否在分词词典和停用词典内\n                if s in self.dic:\n                    if s in self.stoplis:\n                        matched = 1\n                        n = n + i\n                        break\n                    else:\n                        words.append(s)\n                        matched = 1\n                        n = n + i\n                        break\n                if s in self.stoplis:\n                    matched = 1\n                    n = n + i\n                    break\n            if not matched:\n                words.append(chars[n])\n                n = n + 1\n        print(\"/\".join(words))\n\n\nif __name__ == '__main__':\n    mm = MM()\n    mm.analyze(\"我去北京四维图新大厦的路上经过@火车站和@天安门广场。\")\n```\n\n测试结果\n```text\n我/去/北京/四维图新/大厦/的/路上/经过/火车站/和/天安门/广场/。\n```\n\n### 逆向最大匹配法（RMM） 实现案例\n\n逆向最大匹配法 实现代码\n``` python python\nclass RMM:\n    def __init__(self, word_dict, stop_dict):\n        self.word_dict = word_dict\n        self.stop_dict = stop_dict\n        # 扫描窗口大小,由最大单词长度决定\n        self.window_max_size = self.__getMaxLen()\n\n    def __getMaxLen(self):\n        return max(map(len, [word for word in self.word_dict]))\n\n    def analyze(self, text):\n        result = []\n        index = len(text)  # 判断位置\n        while index > 0:\n            # 判断位置从后向前移动，当位置太靠前时，窗口需要结合实际缩小\n            window_size = min(index, self.window_max_size)\n            for size in range(window_size, 0, -1):\n                piece = text[index-size: index]\n                if piece in self.stop_dict:\n                    index = index - size + 1\n                    piece = \"-*-停止词-*-\"\n                    break\n                elif piece in self.word_dict:\n                    index = index - size + 1\n                    break\n            index = index - 1\n            result.append(piece)\n        # 因为是从后向前切分的,保存结果顺序需要反转\n        result.reverse()\n        return result\n\n\nif __name__ == '__main__':\n    words = set()\n    stops = set()\n    with open('words.txt', 'r') as f:\n        for w in f:\n            words.add(w.strip())\n    with open('stoplis.txt', 'r') as f:\n        for w in f:\n            stops.add(w.strip())\n    rmm = RMM(words, stops)\n    res = rmm.analyze(\"我去北京四维图新大厦的路上经过@火车站和@天安门广场。\")\n    print(\"/\".join([w for w in res if w != \"-*-停止词-*-\"]))\n```\n\n测试结果\n``` text\n我/去/北京/四维图新/大厦/的/路上/经过/火车站/和/天安门/广场/。\n```","content":"<ul>\n<li>最大匹配法（MM）实现案例</li>\n<li>逆向最大匹配法（RMM） 实现案例</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"准备文件\"><a href=\"#准备文件\" class=\"headerlink\" title=\"准备文件\"></a>准备文件</h3><p>词典文件<br><figure class=\"highlight plain\"><figcaption><span>word.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京</span><br><span class=\"line\">天安门</span><br><span class=\"line\">四维图新</span><br><span class=\"line\">大厦</span><br><span class=\"line\">广场</span><br><span class=\"line\">路上</span><br><span class=\"line\">前往</span><br><span class=\"line\">火车站</span><br><span class=\"line\">公司</span><br><span class=\"line\">经过</span><br></pre></td></tr></table></figure></p>\n<p>停用词文件<br><figure class=\"highlight plain\"><figcaption><span>stoplis.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@</span><br><span class=\"line\">#</span><br><span class=\"line\">￥</span><br><span class=\"line\">%</span><br><span class=\"line\">&amp;</span><br><span class=\"line\">_</span><br><span class=\"line\">=</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最大匹配法（MM）实现案例\"><a href=\"#最大匹配法（MM）实现案例\" class=\"headerlink\" title=\"最大匹配法（MM）实现案例\"></a>最大匹配法（MM）实现案例</h3><p>最大匹配法 代码实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MM</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.dic = &#123;&#125;</span><br><span class=\"line\">        self.stoplis = &#123;&#125;</span><br><span class=\"line\">        self.load()</span><br><span class=\"line\">        self.max_chars = <span class=\"number\">0</span> <span class=\"comment\"># 遍历分词字典，获得最大分词长度</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(key) &gt; self.max_chars:</span><br><span class=\"line\">                self.max_chars = len(key)</span><br><span class=\"line\">        <span class=\"comment\"># map写法</span></span><br><span class=\"line\">        <span class=\"comment\"># self.max_chars = max(map(len, [x for x in self.dic]))</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得分词字典，存储为字典形式</span></span><br><span class=\"line\">        f1 = codecs.open(<span class=\"string\">'words.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            line = f1.readline()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            term = line.strip().replace(<span class=\"string\">'\\r\\n'</span>, <span class=\"string\">''</span>)  <span class=\"comment\"># 去除字符串两侧的换行符，避免取最大分词长度时出差错</span></span><br><span class=\"line\">            self.dic[term] = <span class=\"number\">1</span></span><br><span class=\"line\">        f1.close</span><br><span class=\"line\">        <span class=\"comment\"># 获得停用词典，存储为字典形式</span></span><br><span class=\"line\">        f2 = codecs.open(<span class=\"string\">'stoplis.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            line = f2.readline()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            term = line.strip()</span><br><span class=\"line\">            self.stoplis[term] = <span class=\"number\">1</span></span><br><span class=\"line\">        f2.close</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 正向最大匹配分词算法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">analyze</span><span class=\"params\">(self, chars)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得需要分词的文本，为字符串形式</span></span><br><span class=\"line\">        <span class=\"comment\"># 去除字符串两侧的换行符，避免截词时出差错 </span></span><br><span class=\"line\">        chars = chars.strip().replace(<span class=\"string\">'\\r\\n'</span>, <span class=\"string\">''</span>)  </span><br><span class=\"line\">        <span class=\"comment\"># 定义一个空列表来存储分词结果</span></span><br><span class=\"line\">        words = []</span><br><span class=\"line\">        n = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &lt; len(chars):</span><br><span class=\"line\">            matched = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.max_chars, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">                s = chars[n:n + i]</span><br><span class=\"line\">                <span class=\"comment\"># 判断所截取字符串是否在分词词典和停用词典内</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> s <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> s <span class=\"keyword\">in</span> self.stoplis:</span><br><span class=\"line\">                        matched = <span class=\"number\">1</span></span><br><span class=\"line\">                        n = n + i</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        words.append(s)</span><br><span class=\"line\">                        matched = <span class=\"number\">1</span></span><br><span class=\"line\">                        n = n + i</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> s <span class=\"keyword\">in</span> self.stoplis:</span><br><span class=\"line\">                    matched = <span class=\"number\">1</span></span><br><span class=\"line\">                    n = n + i</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matched:</span><br><span class=\"line\">                words.append(chars[n])</span><br><span class=\"line\">                n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">\"/\"</span>.join(words))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    mm = MM()</span><br><span class=\"line\">    mm.analyze(<span class=\"string\">\"我去北京四维图新大厦的路上经过@火车站和@天安门广场。\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>测试结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我/去/北京/四维图新/大厦/的/路上/经过/火车站/和/天安门/广场/。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"逆向最大匹配法（RMM）-实现案例\"><a href=\"#逆向最大匹配法（RMM）-实现案例\" class=\"headerlink\" title=\"逆向最大匹配法（RMM） 实现案例\"></a>逆向最大匹配法（RMM） 实现案例</h3><p>逆向最大匹配法 实现代码<br><figure class=\"highlight python\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RMM</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, word_dict, stop_dict)</span>:</span></span><br><span class=\"line\">        self.word_dict = word_dict</span><br><span class=\"line\">        self.stop_dict = stop_dict</span><br><span class=\"line\">        <span class=\"comment\"># 扫描窗口大小,由最大单词长度决定</span></span><br><span class=\"line\">        self.window_max_size = self.__getMaxLen()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getMaxLen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(map(len, [word <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> self.word_dict]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">analyze</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        index = len(text)  <span class=\"comment\"># 判断位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 判断位置从后向前移动，当位置太靠前时，窗口需要结合实际缩小</span></span><br><span class=\"line\">            window_size = min(index, self.window_max_size)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> size <span class=\"keyword\">in</span> range(window_size, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">                piece = text[index-size: index]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> piece <span class=\"keyword\">in</span> self.stop_dict:</span><br><span class=\"line\">                    index = index - size + <span class=\"number\">1</span></span><br><span class=\"line\">                    piece = <span class=\"string\">\"-*-停止词-*-\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> piece <span class=\"keyword\">in</span> self.word_dict:</span><br><span class=\"line\">                    index = index - size + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            index = index - <span class=\"number\">1</span></span><br><span class=\"line\">            result.append(piece)</span><br><span class=\"line\">        <span class=\"comment\"># 因为是从后向前切分的,保存结果顺序需要反转</span></span><br><span class=\"line\">        result.reverse()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    words = set()</span><br><span class=\"line\">    stops = set()</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'words.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            words.add(w.strip())</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'stoplis.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            stops.add(w.strip())</span><br><span class=\"line\">    rmm = RMM(words, stops)</span><br><span class=\"line\">    res = rmm.analyze(<span class=\"string\">\"我去北京四维图新大厦的路上经过@火车站和@天安门广场。\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"/\"</span>.join([w <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> res <span class=\"keyword\">if</span> w != <span class=\"string\">\"-*-停止词-*-\"</span>]))</span><br></pre></td></tr></table></figure></p>\n<p>测试结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我/去/北京/四维图新/大厦/的/路上/经过/火车站/和/天安门/广场/。</span><br></pre></td></tr></table></figure></p>\n","slug":"基于规则的分词实现","updated":"2019-05-16T02:46:52.000Z","link":"","permalink":"http://yoursite.com/基于规则的分词实现/","excerpt":"最大匹配法（MM）实现案例 逆向最大匹配法（RMM） 实现案例","categories":[{"name":"中文分词","slug":"中文分词","permalink":"http://yoursite.com/categories/中文分词/"}],"tags":[{"name":"最大匹配法","slug":"最大匹配法","permalink":"http://yoursite.com/tags/最大匹配法/"}]},{"title":"RSA算法","date":"2019-05-09T01:29:30.000Z","path":"RSA算法/","text":"RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。 RSA加密的安全性人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。而RSA加密一般使用1024位或者2048位，基本可以理解为不可破解 RSA加密解密原理 X-&gt;Y加密公式: $X^E{mod}N=Y$Y-&gt;X解密公式: $Y^D{mod}N=N$ 1. 将N和E封装成公钥，N和D封装成私钥2. N为两个不等质数的乘积3. E与φ(N) 互素（互为质数）4. D满足$D \\times E \\equiv 1({mod}φ(N))$ 即 $D \\times E-1=k \\times φ(N)$ 案例计算 选择两个不等质数p,q (实际密钥一般为1024位或2048位)p=61,q=53 计算乘积nn = p*q = 3233 (二进制110010100001，只有12位) 计算n的欧拉函数φ(n)φ(n) = φ(p)*φ(q)= (p-1)(q-1) = 3120 (质数的因子只有1和本身—一个质数p的欧拉函数等于p-1) 随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。取e = 17 (实际应用中，常常选择$2^16=65537$)。 计算e对于φ(n)的模反元素ded = 1 (mod φ(n)) 即 ed -1 = kφ(n)17d -1 = k3120 即 17d +3120k = 1 得 d = 2753 将n和e封装成公钥，n和d封装成私钥加密使用 (3233,17)，解密使用(3233,2723) 加密(‘a’=65) n = 3233,e = 17所有字符串都可以使用ascil码/unicode值来表示，假设一个字符 m = a，ascii码为65,需要满足 m &lt; n 对他进行加密m^e ≡ c (mod n),c为加密字符串(65^17)%3233 = c 得 c = 2790密码为 2790 解密(2790) n = 3233,d = 2723c^d ≡ m (mod n) 即可得到mm = (2790^2723) %3233 得 m = 65内容为65=’a’ RSA算法相关数学理论 互素|互为质数python12345678910111213141516'''定义法 生成质数'''def primes(start, stop): if start &lt; 2: start = 2 for i in range(start, stop+1): for j in range(2, i): if i % j == 0: break else: yield i# 0到200之间的素数for x in primes(0, 200): print(x) python123456789101112131415161718192021222324252627282930313233343536'''埃氏筛法 生成质数（1）先把1删除（现今数学界1既不是质数也不是合数）（2）读取队列中当前最小的数2，然后把2的倍数删去（3）读取队列中当前最小的数3，然后把3的倍数删去（4）读取队列中当前最小的数5，然后把5的倍数删去（5）如上所述直到需求的范围内所有的数均删除或读取'''# 生成一个奇数生成器。def odd_iter(): n = 1 while True: n = n + 2 yield n# 过滤掉n的倍数的数。def not_divisible(n): return lambda x: x % n &gt; 0# 获取当前序列的第一个元素，然后删除后面序列该元素倍数的数，然后构造新序列。def primes(): yield 2 it = odd_iter() while True: n = next(it) yield n it = filter(not_divisible(n), it)# 获取 start 到 stop 之间的素数。def printPrimes(start, stop): # start, stop = 10, 2000 for n in primes(): if n &gt; start and n &lt; stop: print(n, end=',') elif n &gt; stop: break 欧拉函数欧拉函数的定义：对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。例如euler(8)=4，因为1,3,5,7均和8互质。Euler函数表达通式：euler(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)…(1-1/pn),其中p1,p2……pn为x的所有素因数，x是不为0的整数。euler(1)=1（唯一和1互质的数就是1本身）。欧拉公式的延伸：一个数的与其互质的数(&lt;n)的总和是euler(n)*n/2 根据Euler函数表达通式直接求法：python123456789101112131415# 直接求解欧拉函数def euler(n): res = n a = n i = 2 #i表示小于a的所有质数 while i*i &lt;= a: if a % i == 0: # 先进行除法是为了防止中间数据的溢出 res = res / i * (i-1) while a % i == 0: a /= i i += 1 if a &gt; 1: res = res / a * (a-1) return res 欧拉定理费尔马小定理 模反元素 扩展欧几里得算法辗转相除法 python123456# 辗转相除法求最大公因数def gcd(a, b): if b == 0: return a else: return gcd(b, a % b) 快速幂取模算法 java12345678910111213141516/** * 快速幂取模 计算 (a^b) %c */private static int quick(int a,int b,int c) &#123; int ans=1; //记录结果 a=a%c; //预处理，使得a处于c的数据范围之下 while(b!=0) &#123; if((b&amp;1)==1)&#123; //1即是0000000000000001，判断个位是否是1.如果b的二进制位是1，那么我们的结果是要参与运算的 ans=(ans*a)%c; &#125; b&gt;&gt;=1; //二进制的移位操作，相当于每次除以2，用二进制看，就是我们不断的遍历b的二进制位 a=(a*a)%c; //不断的加倍 &#125; return ans;&#125; 参考资料ab6326795 公钥，私钥和数字签名这样最好理解不会汪汪的猫咪 CSDN RSA加密的原理——为什么被公钥加密的可以被私钥解密？Warning 扩展欧几里得算法详解sortmin CSDN 欧拉函数的两种基本写法","raw":"---\ntitle: RSA算法\ndate: 2019-05-09 09:29:30\ncategories:\n- 算法\ntags:\n- 公钥加密算法\n---\n\nRSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。\n\n<!--more-->\n\n### RSA加密的安全性\n人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。而RSA加密一般使用1024位或者2048位，基本可以理解为不可破解\n\n### RSA加密解密原理\n> X->Y加密公式: $X^E{mod}N=Y$\n> Y->X解密公式: $Y^D{mod}N=N$\n\n*1. 将N和E封装成公钥，N和D封装成私钥*\n*2. N为两个不等质数的乘积*\n*3. E与φ(N) 互素（互为质数）*\n*4. D满足$D \\times E \\equiv 1({mod}φ(N))$ 即  $D \\times E-1=k \\times φ(N)$*\n\n### 案例计算\n1. 选择两个不等质数p,q  (实际密钥一般为1024位或2048位)\np=61,q=53\n2. 计算乘积n\nn = p*q = 3233 (二进制110010100001，只有12位)\n3. 计算n的欧拉函数φ(n)\nφ(n) = φ(p)*φ(q)= (p-1)(q-1) = 3120  (质数的因子只有1和本身---一个质数p的欧拉函数等于p-1)\n4. 随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质。\n取e = 17 (实际应用中，常常选择$2^16=65537$)。\n5. 计算e对于φ(n)的模反元素d\n ed = 1 (mod φ(n)) 即 e*d -1 = k*φ(n) \n 17*d -1 = k*3120 即 17d +3120k = 1 得 d = 2753\n6. 将n和e封装成公钥，n和d封装成私钥\n加密使用 (3233,17)，解密使用(3233,2723)\n7. 加密('a'=65) n = 3233,e = 17\n所有字符串都可以使用ascil码/unicode值来表示，假设一个字符 m = a，ascii码为65,需要满足 m < n 对他进行加密\nm^e ≡ c (mod n),c为加密字符串 \n(65^17)%3233 = c 得 c = 2790\n密码为 2790\n8. 解密(2790) n = 3233,d = 2723\nc^d ≡ m (mod n) 即可得到m \nm = (2790^2723) %3233 得 m = 65\n内容为65='a'\n\n### RSA算法相关数学理论\n- 互素|互为质数\n``` python python\n'''\n定义法 生成质数\n'''\ndef primes(start, stop):\n    if start < 2:\n        start = 2\n    for i in range(start, stop+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            yield i\n\n# 0到200之间的素数\nfor x in primes(0, 200):\n    print(x)\n```\n``` python python\n'''\n埃氏筛法 生成质数\n（1）先把1删除（现今数学界1既不是质数也不是合数）\n（2）读取队列中当前最小的数2，然后把2的倍数删去\n（3）读取队列中当前最小的数3，然后把3的倍数删去\n（4）读取队列中当前最小的数5，然后把5的倍数删去\n（5）如上所述直到需求的范围内所有的数均删除或读取\n'''\n# 生成一个奇数生成器。\ndef odd_iter():\n    n = 1\n    while True:\n        n = n + 2\n        yield n\n\n# 过滤掉n的倍数的数。\ndef not_divisible(n):\n    return lambda x: x % n > 0\n\n# 获取当前序列的第一个元素，然后删除后面序列该元素倍数的数，然后构造新序列。\ndef primes():\n    yield 2\n    it = odd_iter()\n    while True:\n        n = next(it)\n        yield n\n        it = filter(not_divisible(n), it)\n\n# 获取 start 到 stop 之间的素数。\ndef printPrimes(start, stop):\n    # start, stop = 10, 2000\n    for n in primes():\n        if n > start and n < stop:\n            print(n, end=',')\n        elif n > stop:\n            break\n```\n- 欧拉函数\n**欧拉函数的定义**：对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。例如euler(8)=4，因为1,3,5,7均和8互质。\n**Euler函数表达通式**：euler(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)…(1-1/pn),其中p1,p2……pn为x的所有素因数，x是不为0的整数。euler(1)=1（唯一和1互质的数就是1本身）。 \n**欧拉公式的延伸**：一个数的与其互质的数(<n)的总和是euler(n)*n/2\n\n根据Euler函数表达通式直接求法：\n```python python\n# 直接求解欧拉函数\ndef euler(n):\n    res = n\n    a = n\n    i = 2 #i表示小于a的所有质数\n    while i*i <= a:\n        if a % i == 0:\n            # 先进行除法是为了防止中间数据的溢出\n            res = res / i * (i-1)\n            while a % i == 0:\n                a /= i\n        i += 1\n    if a > 1:\n        res = res / a * (a-1)\n    return res\n```\n- 欧拉定理\n费尔马小定理\n- 模反元素\n- 扩展欧几里得算法\n辗转相除法\n``` python python\n# 辗转相除法求最大公因数\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```\n- 快速幂取模算法\n``` java java\n/**\n *  快速幂取模   计算 (a^b) %c\n */\nprivate static int quick(int a,int b,int c) {\n    int ans=1;   //记录结果\n    a=a%c;   //预处理，使得a处于c的数据范围之下\n    while(b!=0)\n    {\n        if((b&1)==1){ //1即是0000000000000001，判断个位是否是1.如果b的二进制位是1，那么我们的结果是要参与运算的\n            ans=(ans*a)%c;   \n        }\n        b>>=1;    //二进制的移位操作，相当于每次除以2，用二进制看，就是我们不断的遍历b的二进制位\n        a=(a*a)%c;   //不断的加倍\n    }\n    return ans;\n}\n```\n\n### 参考资料\n*ab6326795* [公钥，私钥和数字签名这样最好理解](https://blog.csdn.net/tabactivity/article/details/49685319)\n*不会汪汪的猫咪* [CSDN RSA加密的原理——为什么被公钥加密的可以被私钥解密？](https://blog.csdn.net/doujinlong1/article/details/82051986)\n*_Warning_* [扩展欧几里得算法详解](https://blog.csdn.net/destiny1507/article/details/81750874)\n*sortmin* [CSDN 欧拉函数的两种基本写法](https://blog.csdn.net/sortmin/article/details/78157149)","content":"<p>RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。</p>\n<a id=\"more\"></a>\n<h3 id=\"RSA加密的安全性\"><a href=\"#RSA加密的安全性\" class=\"headerlink\" title=\"RSA加密的安全性\"></a>RSA加密的安全性</h3><p>人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。而RSA加密一般使用1024位或者2048位，基本可以理解为不可破解</p>\n<h3 id=\"RSA加密解密原理\"><a href=\"#RSA加密解密原理\" class=\"headerlink\" title=\"RSA加密解密原理\"></a>RSA加密解密原理</h3><blockquote>\n<p>X-&gt;Y加密公式: $X^E{mod}N=Y$<br>Y-&gt;X解密公式: $Y^D{mod}N=N$</p>\n</blockquote>\n<p><em>1. 将N和E封装成公钥，N和D封装成私钥</em><br><em>2. N为两个不等质数的乘积</em><br><em>3. E与φ(N) 互素（互为质数）</em><br><em>4. D满足$D \\times E \\equiv 1({mod}φ(N))$ 即  $D \\times E-1=k \\times φ(N)$</em></p>\n<h3 id=\"案例计算\"><a href=\"#案例计算\" class=\"headerlink\" title=\"案例计算\"></a>案例计算</h3><ol>\n<li>选择两个不等质数p,q  (实际密钥一般为1024位或2048位)<br>p=61,q=53</li>\n<li>计算乘积n<br>n = p*q = 3233 (二进制110010100001，只有12位)</li>\n<li>计算n的欧拉函数φ(n)<br>φ(n) = φ(p)*φ(q)= (p-1)(q-1) = 3120  (质数的因子只有1和本身—一个质数p的欧拉函数等于p-1)</li>\n<li>随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。<br>取e = 17 (实际应用中，常常选择$2^16=65537$)。</li>\n<li>计算e对于φ(n)的模反元素d<br>ed = 1 (mod φ(n)) 即 e<em>d -1 = k</em>φ(n)<br>17<em>d -1 = k</em>3120 即 17d +3120k = 1 得 d = 2753</li>\n<li>将n和e封装成公钥，n和d封装成私钥<br>加密使用 (3233,17)，解密使用(3233,2723)</li>\n<li>加密(‘a’=65) n = 3233,e = 17<br>所有字符串都可以使用ascil码/unicode值来表示，假设一个字符 m = a，ascii码为65,需要满足 m &lt; n 对他进行加密<br>m^e ≡ c (mod n),c为加密字符串<br>(65^17)%3233 = c 得 c = 2790<br>密码为 2790</li>\n<li>解密(2790) n = 3233,d = 2723<br>c^d ≡ m (mod n) 即可得到m<br>m = (2790^2723) %3233 得 m = 65<br>内容为65=’a’</li>\n</ol>\n<h3 id=\"RSA算法相关数学理论\"><a href=\"#RSA算法相关数学理论\" class=\"headerlink\" title=\"RSA算法相关数学理论\"></a>RSA算法相关数学理论</h3><ul>\n<li>互素|互为质数<figure class=\"highlight python\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">定义法 生成质数</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">primes</span><span class=\"params\">(start, stop)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> start &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        start = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, stop+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i % j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0到200之间的素数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> primes(<span class=\"number\">0</span>, <span class=\"number\">200</span>):</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">埃氏筛法 生成质数</span></span><br><span class=\"line\"><span class=\"string\">（1）先把1删除（现今数学界1既不是质数也不是合数）</span></span><br><span class=\"line\"><span class=\"string\">（2）读取队列中当前最小的数2，然后把2的倍数删去</span></span><br><span class=\"line\"><span class=\"string\">（3）读取队列中当前最小的数3，然后把3的倍数删去</span></span><br><span class=\"line\"><span class=\"string\">（4）读取队列中当前最小的数5，然后把5的倍数删去</span></span><br><span class=\"line\"><span class=\"string\">（5）如上所述直到需求的范围内所有的数均删除或读取</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"comment\"># 生成一个奇数生成器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">odd_iter</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    n = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        n = n + <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤掉n的倍数的数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_divisible</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x: x % n &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取当前序列的第一个元素，然后删除后面序列该元素倍数的数，然后构造新序列。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">primes</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    it = odd_iter()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        n = next(it)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> n</span><br><span class=\"line\">        it = filter(not_divisible(n), it)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取 start 到 stop 之间的素数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printPrimes</span><span class=\"params\">(start, stop)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># start, stop = 10, 2000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> primes():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &gt; start <span class=\"keyword\">and</span> n &lt; stop:</span><br><span class=\"line\">            print(n, end=<span class=\"string\">','</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> n &gt; stop:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>欧拉函数<br><strong>欧拉函数的定义</strong>：对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。例如euler(8)=4，因为1,3,5,7均和8互质。<br><strong>Euler函数表达通式</strong>：euler(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)…(1-1/pn),其中p1,p2……pn为x的所有素因数，x是不为0的整数。euler(1)=1（唯一和1互质的数就是1本身）。<br><strong>欧拉公式的延伸</strong>：一个数的与其互质的数(&lt;n)的总和是euler(n)*n/2</li>\n</ul>\n<p>根据Euler函数表达通式直接求法：<br><figure class=\"highlight python\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接求解欧拉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">euler</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    res = n</span><br><span class=\"line\">    a = n</span><br><span class=\"line\">    i = <span class=\"number\">2</span> <span class=\"comment\">#i表示小于a的所有质数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i*i &lt;= a:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a % i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 先进行除法是为了防止中间数据的溢出</span></span><br><span class=\"line\">            res = res / i * (i<span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> a % i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                a /= i</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        res = res / a * (a<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>欧拉定理<br>费尔马小定理</li>\n<li>模反元素</li>\n<li><p>扩展欧几里得算法<br>辗转相除法</p>\n<figure class=\"highlight python\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 辗转相除法求最大公因数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gcd(b, a % b)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快速幂取模算法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  快速幂取模   计算 (a^b) %c</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">quick</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;   <span class=\"comment\">//记录结果</span></span><br><span class=\"line\">    a=a%c;   <span class=\"comment\">//预处理，使得a处于c的数据范围之下</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b!=<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((b&amp;<span class=\"number\">1</span>)==<span class=\"number\">1</span>)&#123; <span class=\"comment\">//1即是0000000000000001，判断个位是否是1.如果b的二进制位是1，那么我们的结果是要参与运算的</span></span><br><span class=\"line\">            ans=(ans*a)%c;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;    <span class=\"comment\">//二进制的移位操作，相当于每次除以2，用二进制看，就是我们不断的遍历b的二进制位</span></span><br><span class=\"line\">        a=(a*a)%c;   <span class=\"comment\">//不断的加倍</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><em>ab6326795</em> <a href=\"https://blog.csdn.net/tabactivity/article/details/49685319\" target=\"_blank\" rel=\"noopener\">公钥，私钥和数字签名这样最好理解</a><br><em>不会汪汪的猫咪</em> <a href=\"https://blog.csdn.net/doujinlong1/article/details/82051986\" target=\"_blank\" rel=\"noopener\">CSDN RSA加密的原理——为什么被公钥加密的可以被私钥解密？</a><br><em><em>Warning</em></em> <a href=\"https://blog.csdn.net/destiny1507/article/details/81750874\" target=\"_blank\" rel=\"noopener\">扩展欧几里得算法详解</a><br><em>sortmin</em> <a href=\"https://blog.csdn.net/sortmin/article/details/78157149\" target=\"_blank\" rel=\"noopener\">CSDN 欧拉函数的两种基本写法</a></p>\n","slug":"RSA算法","updated":"2019-05-09T05:24:30.420Z","link":"","permalink":"http://yoursite.com/RSA算法/","excerpt":"RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"公钥加密算法","slug":"公钥加密算法","permalink":"http://yoursite.com/tags/公钥加密算法/"}]},{"title":"Git","date":"2019-05-08T08:31:53.000Z","path":"Git/","text":"生成秘钥、git暂存区 git安装配置相关生成秘钥1ssh-keygen -t rsa -C \"youremail@example.com\" git本地使用git stash切换其他分支前，暂存当前分支的修改12# 将当前工作区的暂存区的数据收入stashgit stash git stash 不会存储未跟踪的文件，所以使用该指令操作如下比较安全，执行stash后内容为最近commit节点内容。12345678910# 1.看有没有未追踪的文件git status# 2.如果有未追踪的文件，先addgit add .# 3.可暂存修改了git stash# 或git stash save '本次暂存的标识名字' 查看存储列表1git stash list 切换回分支后，恢复暂存的修改12345678910111213# 直接恢复最近的暂存，pop后暂存列表清空git stash popgit stash pop stash@&#123;0&#125;# 也有其他指令可以恢复,apply后暂存列表不清空git stash applygit stash apply stash@&#123;0&#125;# 手动清理暂存列表#删除某个暂存, 暂存记录保存在list内,需要通过list索引index取出恢复git stash drop stash@&#123;index&#125;#删除全部暂存git stash clear","raw":"---\ntitle: Git\ndate: 2019-05-08 16:31:53\ncategories:\n- 工具\ntags:\n- git\n- ssh\n- 经验\ntoc: true\n---\n\n生成秘钥、git暂存区\n\n<!--more-->\n\n## git安装配置相关\n生成秘钥\n``` bash\nssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n## git本地使用\n\n### git stash\n\n切换其他分支前，暂存当前分支的修改\n``` bash\n# 将当前工作区的暂存区的数据收入stash\ngit stash\n```\n\n> **git stash** 不会存储未跟踪的文件，所以使用该指令操作如下比较安全，执行stash后内容为最近commit节点内容。\n``` bash\n# 1.看有没有未追踪的文件\ngit status\n\n# 2.如果有未追踪的文件，先add\ngit add .\n\n# 3.可暂存修改了\ngit stash\n# 或\ngit stash save '本次暂存的标识名字'\n```\n\n查看存储列表\n``` bash\ngit stash list\n```\n\n切换回分支后，恢复暂存的修改\n``` bash\n# 直接恢复最近的暂存，pop后暂存列表清空\ngit stash pop\ngit stash pop stash@{0}\n\n# 也有其他指令可以恢复,apply后暂存列表不清空\ngit stash apply\ngit stash apply stash@{0}\n\n# 手动清理暂存列表\n#删除某个暂存, 暂存记录保存在list内,需要通过list索引index取出恢复\ngit stash drop stash@{index}\n#删除全部暂存\ngit stash clear\n```\n","content":"<p>生成秘钥、git暂存区</p>\n<a id=\"more\"></a>\n<h2 id=\"git安装配置相关\"><a href=\"#git安装配置相关\" class=\"headerlink\" title=\"git安装配置相关\"></a>git安装配置相关</h2><p>生成秘钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"git本地使用\"><a href=\"#git本地使用\" class=\"headerlink\" title=\"git本地使用\"></a>git本地使用</h2><h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>切换其他分支前，暂存当前分支的修改<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将当前工作区的暂存区的数据收入stash</span></span><br><span class=\"line\">git stash</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>git stash</strong> 不会存储未跟踪的文件，所以使用该指令操作如下比较安全，执行stash后内容为最近commit节点内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.看有没有未追踪的文件</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.如果有未追踪的文件，先add</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.可暂存修改了</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">git stash save <span class=\"string\">'本次暂存的标识名字'</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>查看存储列表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure></p>\n<p>切换回分支后，恢复暂存的修改<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接恢复最近的暂存，pop后暂存列表清空</span></span><br><span class=\"line\">git stash pop</span><br><span class=\"line\">git stash pop stash@&#123;0&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也有其他指令可以恢复,apply后暂存列表不清空</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手动清理暂存列表</span></span><br><span class=\"line\"><span class=\"comment\">#删除某个暂存, 暂存记录保存在list内,需要通过list索引index取出恢复</span></span><br><span class=\"line\">git stash drop stash@&#123;index&#125;</span><br><span class=\"line\"><span class=\"comment\">#删除全部暂存</span></span><br><span class=\"line\">git stash clear</span><br></pre></td></tr></table></figure></p>\n","slug":"Git","updated":"2019-05-16T05:25:48.278Z","link":"","permalink":"http://yoursite.com/Git/","excerpt":"生成秘钥、git暂存区","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"},{"name":"经验","slug":"经验","permalink":"http://yoursite.com/tags/经验/"}]},{"title":"Dijkstra算法","date":"2019-05-06T01:38:18.000Z","path":"Dijkstra算法/","text":"迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。 序号 S集合 U集合 1 A=0 (A)B=6,(A)C=3,D=∞,E=∞,F=∞ 2 A=0,A-C=3 (C)B=5,(C)D=6,(C)E=7,F=∞ 3 A=0,A-C=3,A-C-B=5 (C)D=6,(C)E=7,F=∞ 4 A=0,A-C=3,A-C-B=5,A-C-D=6 (C)E=7,(D)F=9 5 A=0,A-C=3,A-C-B=5,A-C-D=6,A-C-E=7 (D)F=9 6 A=0,A-C=3,A-C-B=5,A-C-D=6,A-C-E=7,A-C-D-F=9 当U集合为空时，探索路径结束，A-F最短路径:A-C-D-F=9 S集合 已探索最短路径的顶点集合（记录最短路径和距离）U集合 未确定最短路径的顶点集合（记录短路径和距离） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class Dijkstra &#123; public static final int M = 10000; // 代表正无穷 public static String[] nodes = &#123;\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"&#125;; public static void main(String[] args) &#123; // 二维数组每一行分别是 A、B、C、D、E 各点到其余点的距离, // A -&gt; A 距离为0, 常量M 为正无穷 int[][] weight1 = &#123; &#123;0,6,3,M,M,M&#125;, &#123;6,0,2,5,M,M&#125;, &#123;3,2,0,3,4,M&#125;, &#123;M,5,3,0,2,3&#125;, &#123;M,M,4,2,0,5&#125;, &#123;M,M,M,3,5,0&#125;, &#125;; int start = 0; int[] shortPath = dijkstra(weight1, start); for (int i = 0; i &lt; shortPath.length; i++) System.out.println(\"从\" + nodes[start] + \"出发到\" + nodes[i] + \"的最短距离为：\" + shortPath[i]); &#125; public static int[] dijkstra(int[][] weight, int start) &#123; // 接受一个有向图的权重矩阵，和一个起点编号start（从0编号，顶点存在数组中） // 返回一个int[] 数组，表示从start到它的最短路径长度 int n = weight.length; // 顶点个数 int[] shortPath = new int[n]; // 保存start到其他各点的最短路径 String[] path = new String[n]; // 保存start到其他各点最短路径的字符串表示 for (int i = 0; i &lt; n; i++) path[i] = new String(nodes[start] + \"--&gt;\" + nodes[i]); int[] visited = new int[n]; // 标记当前该顶点的最短路径是否已经求出,1表示已求出 // 初始化，第一个顶点已经求出 shortPath[start] = 0; visited[start] = 1; for (int count = 1; count &lt; n; count++) &#123; // 要加入n-1个顶点 int k = -1; // 选出一个距离初始顶点start最近的未标记顶点 int dmin = Integer.MAX_VALUE; for (int i = 0; i &lt; n; i++) &#123; if (visited[i] == 0 &amp;&amp; weight[start][i] &lt; dmin) &#123; dmin = weight[start][i]; k = i; &#125; &#125; // 将新选出的顶点标记为已求出最短路径，且到start的最短路径就是dmin shortPath[k] = dmin; visited[k] = 1; // 以k为中间点，修正从start到未访问各点的距离 for (int i = 0; i &lt; n; i++) &#123; //如果 '起始点到当前点距离' + '当前点到某点距离' &lt; '起始点到某点距离', 则更新 if (visited[i] == 0 &amp;&amp; weight[start][k] + weight[k][i] &lt; weight[start][i]) &#123; weight[start][i] = weight[start][k] + weight[k][i]; path[i] = path[k] + \"--&gt;\" + nodes[i]; &#125; &#125; &#125; for (int i = 0; i &lt; n; i++) &#123; System.out.println(\"从\" + nodes[start] + \"出发到\" + nodes[i] + \"的最短路径为：\" + path[i]); &#125; System.out.println(\"=====================================\"); return shortPath; &#125;&#125; 运行结果12345678910111213从A出发到A的最短路径为：A--&gt;A从A出发到B的最短路径为：A--&gt;C--&gt;B从A出发到C的最短路径为：A--&gt;C从A出发到D的最短路径为：A--&gt;C--&gt;D从A出发到E的最短路径为：A--&gt;C--&gt;E从A出发到F的最短路径为：A--&gt;C--&gt;D--&gt;F=====================================从A出发到A的最短距离为：0从A出发到B的最短距离为：5从A出发到C的最短距离为：3从A出发到D的最短距离为：6从A出发到E的最短距离为：7从A出发到F的最短距离为：9 迪杰斯特拉(Dijkstra)算法适用于路径距离大于0（权值&gt;0）的最短路径计算，对带负权的图，应该用Floyd算法。 参考资料殷天文 简书 深入理解 Dijkstra 算法实现原理heroacool CSDN 数据结构–Dijkstra算法最清楚的讲解","raw":"---\ntitle: Dijkstra算法\ndate: 2019-05-06 09:38:18\ncategories:\n- 算法\ntags:\n- 最短路径\n---\n\n迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。\n它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。\n\n<!--more-->\n\n{% asset_img pathmap1.jpg 找A-F最短路经 %}\n\n|序号|S集合|U集合|\n|:-:|:-|:-|\n|1|A=0|(A)B=6,**(A)C=3**,D=∞,E=∞,F=∞|\n|2|A=0,A-C=3|**(C)B=5**,(C)D=6,(C)E=7,F=∞|\n|3|A=0,A-C=3,A-C-B=5|**(C)D=6**,(C)E=7,F=∞|\n|4|A=0,A-C=3,A-C-B=5,A-C-D=6|**(C)E=7**,(D)F=9|\n|5|A=0,A-C=3,A-C-B=5,A-C-D=6,A-C-E=7|**(D)F=9**|\n|6|A=0,A-C=3,A-C-B=5,A-C-D=6,A-C-E=7,A-C-D-F=9||\n\n当U集合为空时，探索路径结束，\nA-F最短路径:A-C-D-F=9\n\n**S集合** 已探索最短路径的顶点集合（记录最短路径和距离）\n**U集合** 未确定最短路径的顶点集合（记录短路径和距离）\n\n``` java\npublic class Dijkstra {\n    public static final int M = 10000; // 代表正无穷\n    public static String[] nodes = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\n\n    public static void main(String[] args) {\n        // 二维数组每一行分别是 A、B、C、D、E 各点到其余点的距离,\n        // A -> A 距离为0, 常量M 为正无穷\n        int[][] weight1 = {\n                {0,6,3,M,M,M},\n                {6,0,2,5,M,M},\n                {3,2,0,3,4,M},\n                {M,5,3,0,2,3},\n                {M,M,4,2,0,5},\n                {M,M,M,3,5,0},\n        };\n\n        int start = 0;\n\n        int[] shortPath = dijkstra(weight1, start);\n\n        for (int i = 0; i < shortPath.length; i++)\n            System.out.println(\"从\" + nodes[start] + \"出发到\" + nodes[i] + \"的最短距离为：\" + shortPath[i]);\n    }\n\n    public static int[] dijkstra(int[][] weight, int start) {\n        // 接受一个有向图的权重矩阵，和一个起点编号start（从0编号，顶点存在数组中）\n        // 返回一个int[] 数组，表示从start到它的最短路径长度\n        int n = weight.length; // 顶点个数\n        int[] shortPath = new int[n]; // 保存start到其他各点的最短路径\n        String[] path = new String[n]; // 保存start到其他各点最短路径的字符串表示\n        for (int i = 0; i < n; i++)\n            path[i] = new String(nodes[start] + \"-->\" + nodes[i]);\n        int[] visited = new int[n]; // 标记当前该顶点的最短路径是否已经求出,1表示已求出\n\n        // 初始化，第一个顶点已经求出\n        shortPath[start] = 0;\n        visited[start] = 1;\n\n        for (int count = 1; count < n; count++) { // 要加入n-1个顶点\n            int k = -1; // 选出一个距离初始顶点start最近的未标记顶点\n            int dmin = Integer.MAX_VALUE;\n            for (int i = 0; i < n; i++) {\n                if (visited[i] == 0 && weight[start][i] < dmin) {\n                    dmin = weight[start][i];\n                    k = i;\n                }\n            }\n\n            // 将新选出的顶点标记为已求出最短路径，且到start的最短路径就是dmin\n            shortPath[k] = dmin;\n            visited[k] = 1;\n\n            // 以k为中间点，修正从start到未访问各点的距离\n            for (int i = 0; i < n; i++) {\n                //如果 '起始点到当前点距离' + '当前点到某点距离' < '起始点到某点距离', 则更新\n                if (visited[i] == 0 && weight[start][k] + weight[k][i] < weight[start][i]) {\n                    weight[start][i] = weight[start][k] + weight[k][i];\n                    path[i] = path[k] + \"-->\" + nodes[i];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n\n            System.out.println(\"从\" + nodes[start] + \"出发到\" + nodes[i] + \"的最短路径为：\" + path[i]);\n        }\n        System.out.println(\"=====================================\");\n        return shortPath;\n    }\n}\n```\n运行结果\n``` text\n从A出发到A的最短路径为：A-->A\n从A出发到B的最短路径为：A-->C-->B\n从A出发到C的最短路径为：A-->C\n从A出发到D的最短路径为：A-->C-->D\n从A出发到E的最短路径为：A-->C-->E\n从A出发到F的最短路径为：A-->C-->D-->F\n=====================================\n从A出发到A的最短距离为：0\n从A出发到B的最短距离为：5\n从A出发到C的最短距离为：3\n从A出发到D的最短距离为：6\n从A出发到E的最短距离为：7\n从A出发到F的最短距离为：9\n```\n\n> 迪杰斯特拉(Dijkstra)算法适用于路径距离大于0（权值>0）的最短路径计算，对带负权的图，应该用Floyd算法。\n\n### 参考资料\n*殷天文* [简书 深入理解 Dijkstra 算法实现原理](https://www.jianshu.com/p/ff6db00ad866)\n*heroacool* [CSDN 数据结构--Dijkstra算法最清楚的讲解](https://blog.csdn.net/heroacool/article/details/51014824)\n","content":"<p>迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。<br>它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。</p>\n<a id=\"more\"></a>\n<img src=\"/Dijkstra算法/pathmap1.jpg\" title=\"找A-F最短路经\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">S集合</th>\n<th style=\"text-align:left\">U集合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">A=0</td>\n<td style=\"text-align:left\">(A)B=6,<strong>(A)C=3</strong>,D=∞,E=∞,F=∞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">A=0,A-C=3</td>\n<td style=\"text-align:left\"><strong>(C)B=5</strong>,(C)D=6,(C)E=7,F=∞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">A=0,A-C=3,A-C-B=5</td>\n<td style=\"text-align:left\"><strong>(C)D=6</strong>,(C)E=7,F=∞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">A=0,A-C=3,A-C-B=5,A-C-D=6</td>\n<td style=\"text-align:left\"><strong>(C)E=7</strong>,(D)F=9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">A=0,A-C=3,A-C-B=5,A-C-D=6,A-C-E=7</td>\n<td style=\"text-align:left\"><strong>(D)F=9</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">A=0,A-C=3,A-C-B=5,A-C-D=6,A-C-E=7,A-C-D-F=9</td>\n</tr>\n</tbody>\n</table>\n<p>当U集合为空时，探索路径结束，<br>A-F最短路径:A-C-D-F=9</p>\n<p><strong>S集合</strong> 已探索最短路径的顶点集合（记录最短路径和距离）<br><strong>U集合</strong> 未确定最短路径的顶点集合（记录短路径和距离）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dijkstra</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> M = <span class=\"number\">10000</span>; <span class=\"comment\">// 代表正无穷</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] nodes = &#123;<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"E\"</span>,<span class=\"string\">\"F\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 二维数组每一行分别是 A、B、C、D、E 各点到其余点的距离,</span></span><br><span class=\"line\">        <span class=\"comment\">// A -&gt; A 距离为0, 常量M 为正无穷</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] weight1 = &#123;</span><br><span class=\"line\">                &#123;<span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,M,M,M&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">6</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,M,M&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,M&#125;,</span><br><span class=\"line\">                &#123;M,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">                &#123;M,M,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">                &#123;M,M,M,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] shortPath = dijkstra(weight1, start);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; shortPath.length; i++)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"从\"</span> + nodes[start] + <span class=\"string\">\"出发到\"</span> + nodes[i] + <span class=\"string\">\"的最短距离为：\"</span> + shortPath[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] dijkstra(<span class=\"keyword\">int</span>[][] weight, <span class=\"keyword\">int</span> start) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接受一个有向图的权重矩阵，和一个起点编号start（从0编号，顶点存在数组中）</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回一个int[] 数组，表示从start到它的最短路径长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = weight.length; <span class=\"comment\">// 顶点个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] shortPath = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n]; <span class=\"comment\">// 保存start到其他各点的最短路径</span></span><br><span class=\"line\">        String[] path = <span class=\"keyword\">new</span> String[n]; <span class=\"comment\">// 保存start到其他各点最短路径的字符串表示</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            path[i] = <span class=\"keyword\">new</span> String(nodes[start] + <span class=\"string\">\"--&gt;\"</span> + nodes[i]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n]; <span class=\"comment\">// 标记当前该顶点的最短路径是否已经求出,1表示已求出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化，第一个顶点已经求出</span></span><br><span class=\"line\">        shortPath[start] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        visited[start] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> count = <span class=\"number\">1</span>; count &lt; n; count++) &#123; <span class=\"comment\">// 要加入n-1个顶点</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>; <span class=\"comment\">// 选出一个距离初始顶点start最近的未标记顶点</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> dmin = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (visited[i] == <span class=\"number\">0</span> &amp;&amp; weight[start][i] &lt; dmin) &#123;</span><br><span class=\"line\">                    dmin = weight[start][i];</span><br><span class=\"line\">                    k = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将新选出的顶点标记为已求出最短路径，且到start的最短路径就是dmin</span></span><br><span class=\"line\">            shortPath[k] = dmin;</span><br><span class=\"line\">            visited[k] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 以k为中间点，修正从start到未访问各点的距离</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果 '起始点到当前点距离' + '当前点到某点距离' &lt; '起始点到某点距离', 则更新</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (visited[i] == <span class=\"number\">0</span> &amp;&amp; weight[start][k] + weight[k][i] &lt; weight[start][i]) &#123;</span><br><span class=\"line\">                    weight[start][i] = weight[start][k] + weight[k][i];</span><br><span class=\"line\">                    path[i] = path[k] + <span class=\"string\">\"--&gt;\"</span> + nodes[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"从\"</span> + nodes[start] + <span class=\"string\">\"出发到\"</span> + nodes[i] + <span class=\"string\">\"的最短路径为：\"</span> + path[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=====================================\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shortPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从A出发到A的最短路径为：A--&gt;A</span><br><span class=\"line\">从A出发到B的最短路径为：A--&gt;C--&gt;B</span><br><span class=\"line\">从A出发到C的最短路径为：A--&gt;C</span><br><span class=\"line\">从A出发到D的最短路径为：A--&gt;C--&gt;D</span><br><span class=\"line\">从A出发到E的最短路径为：A--&gt;C--&gt;E</span><br><span class=\"line\">从A出发到F的最短路径为：A--&gt;C--&gt;D--&gt;F</span><br><span class=\"line\">=====================================</span><br><span class=\"line\">从A出发到A的最短距离为：0</span><br><span class=\"line\">从A出发到B的最短距离为：5</span><br><span class=\"line\">从A出发到C的最短距离为：3</span><br><span class=\"line\">从A出发到D的最短距离为：6</span><br><span class=\"line\">从A出发到E的最短距离为：7</span><br><span class=\"line\">从A出发到F的最短距离为：9</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>迪杰斯特拉(Dijkstra)算法适用于路径距离大于0（权值&gt;0）的最短路径计算，对带负权的图，应该用Floyd算法。</p>\n</blockquote>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><em>殷天文</em> <a href=\"https://www.jianshu.com/p/ff6db00ad866\" target=\"_blank\" rel=\"noopener\">简书 深入理解 Dijkstra 算法实现原理</a><br><em>heroacool</em> <a href=\"https://blog.csdn.net/heroacool/article/details/51014824\" target=\"_blank\" rel=\"noopener\">CSDN 数据结构–Dijkstra算法最清楚的讲解</a></p>\n","slug":"Dijkstra算法","updated":"2019-05-08T05:15:50.623Z","link":"","permalink":"http://yoursite.com/Dijkstra算法/","excerpt":"迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"最短路径","slug":"最短路径","permalink":"http://yoursite.com/tags/最短路径/"}]},{"title":"分词原理","date":"2019-05-05T17:29:35.000Z","path":"分词原理/","text":"英文中，一个单词就是一个词，而汉语中，以字为基本的书写单位，词语之间没有明显的区分标记，需要人为切分。根据其特点，可以把分词算法分为四大类： 基于规则的分词方法 基于统计的分词方法 基于语义的分词方法 基于理解的分词方法 基于规则的分词方法这种方法又叫作机械分词方法、基于字典的分词方法，它是按照一定的策略将待分析的汉字串与一个“充分大的”机器词典中的词条进行匹配。若在词典中找到某个字符串，则匹配成功。该方法有三个要素，即分词词典、文本扫描顺序和匹配原则。文本的扫描顺序有正向扫描、逆向扫描和双向扫描。匹配原则主要有最大匹配、最小匹配、逐词匹配和最佳匹配。 最大匹配法（MM）。基本思想是：假设自动分词词典中的最长词条所含汉字的个数为 i，则取被处理材料当前字符串序列中的前i个字符作为匹配字段，查找分词词典，若词典中有这样一个i字词，则匹配成功，匹配字段作为一个词被切分出来；若词典中找不到这样的一个i字词，则匹配失败，匹配字段去掉最后一个汉字，剩下的字符作为新的匹配字段，再进行匹配，如此进行下去，直到匹配成功为止。统计结果表明，该方法的错误率为 1/169. 逆向最大匹配法（RMM）。该方法的分词过程与 MM 法相同，不同的是从句子（或文章）末尾开始处理，每次匹配不成功时去掉的是前面的一个汉字。统计结果表明，该方法的错误率为 1/245。 逐词遍历法。把词典中的词按照由长到短递减的顺序逐字搜索整个待处理的材料，一直到把全部的词切分出来为止。不论分词词典多大，被处理的材料多么小，都得把这个分词词典匹配一遍。 设立切分标志法。切分标志有自然和非自然之分。自然切分标志是指文章中出现的非文字符号，如标点符号等；非自然标志是利用词缀和不构成词的词（包 括单音词、复音节词以及象声词等）。设立切分标志法首先收集众多的切分标志，分词时先找出切分标志，把句子切分为一些较短的字段，再用 MM、RMM 或其它的方法进行细加工。这种方法并非真正意义上的分词方法，只是自动分词的一种前处理方式而已，它要额外消耗时间扫描切分标志，增加存储空间存放那些非 自然切分标志。 最佳匹配法（OM）。此法分为正向的最佳匹配法和逆向的最佳匹配法，其出发点是：在词典中按词频的大小顺序排列词条，以求缩短对分词词典的检索时 间，达到最佳效果，从而降低分词的时间复杂度，加快分词速度。实质上，这种方法也不是一种纯粹意义上的分词方法，它只是一种对分词词典的组织方式。OM 法的分词词典每条词的前面必须有指明长度的数据项，所以其空间复杂度有所增加，对提高分词精度没有影响，分词处理的时间复杂度有所降低。 此种方法优点是简单，易于实现。但缺点有很多：匹配速度慢；存在交集型和组合型歧义切分问题；词本身没有一个标准的定义，没有统一标准的词集；不同词典产生的歧义也不同；缺乏自学习的智能性。 基于统计的分词方法该方法的主要思想：词是稳定的组合，因此在上下文中，相邻的字同时出现的次数越多，就越有可能构成一个词。因此字与字相邻出现的概率或频率能较好地反映成词的可信度。可以对训练文本中相邻出现的各个字的组合的频度进行统计，计算它们之间的互现信息。互现信息体现了汉字之间结合关系的紧密程度。当紧密程 度高于某一个阈值时，便可以认为此字组可能构成了一个词。该方法又称为无字典分词。该方法所应用的主要的统计模型有：N 元文法模型（N-gram）、隐马尔可夫模型（Hiden Markov Model，HMM）、最大熵模型（ME）、条件随机场模型（Conditional Random Fields，CRF）等。在实际应用中此类分词算法一般是将其与基于词典的分词方法结合起来，既发挥匹配分词切分速度快、效率高的特点，又利用了无词典分词结合上下文识别生词、自动消除歧义的优点。 基于语义的分词方法语义分词法引入了语义分析，对自然语言自身的语言信息进行更多的处理，如扩充转移网络法、知识分词语义分析法、邻接约束法、综合匹配法、后缀分词法、特征词库法、矩阵约束法、语法分析法等。 扩充转移网络法。该方法以有限状态机概念为基础。有限状态机只能识别正则语言，对有限状态机作的第一次扩充使其具有递归能力，形成递归转移网络 （RTN）。在RTN 中，弧线上的标志不仅可以是终极符（语言中的单词）或非终极符（词类），还可以调用另外的子网络名字分非终极符（如字或字串的成词条件）。这样，计算机在 运行某个子网络时，就可以调用另外的子网络，还可以递归调用。词法扩充转移网络的使用， 使分词处理和语言理解的句法处理阶段交互成为可能，并且有效地解决了汉语分词的歧义。 矩阵约束法。其基本思想是：先建立一个语法约束矩阵和一个语义约束矩阵， 其中元素分别表明具有某词性的词和具有另一词性的词相邻是否符合语法规则， 属于某语义类的词和属于另一词义类的词相邻是否符合逻辑，机器在切分时以之约束分词结果。 基于理解的分词方法基于理解的分词方法是通过让计算机模拟人对句子的理解，达到识别词的效果。其基本思想就是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象。它通常包括三个部分：分词子系统、句法语义子系统、总控部分。在总控部分的协调下，分词子系统可以获得有关词、句子等的句法和语义信息来对分词歧义进行判断，即它模拟了人对句子的理解过程。这种分词方法需要使用大量的语言知识和信息。目前基于理解的分词方法主要有专家系统分词法和神经网络分词法等。 专家系统分词法。从专家系统角度把分词的知识（包括常识性分词知识与消除歧义切分的启发性知识即歧义切分规则）从实现分词过程的推理机中独立出来，使知识库的维护与推理机的实现互不干扰，从而使知识库易于维护和管理。它还具有发现交集歧义字段和多义组合歧义字段的能力和一定的自学习功能。 神经网络分词法。该方法是模拟人脑并行，分布处理和建立数值计算模型工作的。它将分词知识所分散隐式的方法存入神经网络内部，通过自学习和训练修改内部权值，以达到正确的分词结果，最后给出神经网络自动分词结果，如使用 LSTM、GRU 等神经网络模型等。 神经网络与专家系统结合分词法。该方法首先启动神经网络进行分词，当神经网络对新出现的词不能给出准确切分时，激活专家系统进行分析判断，依据知识库进行推理，得出初步分析，并启动学习机制对神经网络进行训练。该方法可以较充分发挥神经网络与专家系统二者优势，进一步提高分词效率。 参考资料Judikator 简书 中文分词原理及常用Python中文分词库介绍","raw":"---\ntitle: 分词原理\ndate: 2019-05-06 01:29:35\ncategories:\n- 数学之美\ntags:\n- 分词\n- 原理\ntoc: true\n---\n\n英文中，一个单词就是一个词，而汉语中，以字为基本的书写单位，词语之间没有明显的区分标记，需要人为切分。\n根据其特点，可以把分词算法分为四大类：\n- 基于规则的分词方法\n- 基于统计的分词方法\n- 基于语义的分词方法\n- 基于理解的分词方法\n\n<!--more-->\n\n{% asset_img naotu1.png %}\n\n### [基于规则的分词方法](/基于规则的分词实现/)\n这种方法又叫作机械分词方法、基于字典的分词方法，它是按照一定的策略将待分析的汉字串与一个“充分大的”机器词典中的词条进行匹配。若在词典中找到某个字符串，则匹配成功。该方法有三个要素，即分词词典、文本扫描顺序和匹配原则。文本的扫描顺序有正向扫描、逆向扫描和双向扫描。匹配原则主要有最大匹配、最小匹配、逐词匹配和最佳匹配。\n\n- **最大匹配法（MM）。**基本思想是：假设自动分词词典中的最长词条所含汉字的个数为 i，则取被处理材料当前字符串序列中的前i个字符作为匹配字段，查找分词词典，若词典中有这样一个i字词，则匹配成功，匹配字段作为一个词被切分出来；若词典中找不到这样的一个i字词，则匹配失败，匹配字段去掉最后一个汉字，剩下的字符作为新的匹配字段，再进行匹配，如此进行下去，直到匹配成功为止。统计结果表明，该方法的错误率为 1/169.\n\n- **逆向最大匹配法（RMM）。**该方法的分词过程与 MM 法相同，不同的是从句子（或文章）末尾开始处理，每次匹配不成功时去掉的是前面的一个汉字。统计结果表明，该方法的错误率为 1/245。\n\n- **逐词遍历法。**把词典中的词按照由长到短递减的顺序逐字搜索整个待处理的材料，一直到把全部的词切分出来为止。不论分词词典多大，被处理的材料多么小，都得把这个分词词典匹配一遍。\n\n- **设立切分标志法。**切分标志有自然和非自然之分。自然切分标志是指文章中出现的非文字符号，如标点符号等；非自然标志是利用词缀和不构成词的词（包 括单音词、复音节词以及象声词等）。设立切分标志法首先收集众多的切分标志，分词时先找出切分标志，把句子切分为一些较短的字段，再用 MM、RMM 或其它的方法进行细加工。这种方法并非真正意义上的分词方法，只是自动分词的一种前处理方式而已，它要额外消耗时间扫描切分标志，增加存储空间存放那些非 自然切分标志。\n\n- **最佳匹配法（OM）。**此法分为正向的最佳匹配法和逆向的最佳匹配法，其出发点是：在词典中按词频的大小顺序排列词条，以求缩短对分词词典的检索时 间，达到最佳效果，从而降低分词的时间复杂度，加快分词速度。实质上，这种方法也不是一种纯粹意义上的分词方法，它只是一种对分词词典的组织方式。OM 法的分词词典每条词的前面必须有指明长度的数据项，所以其空间复杂度有所增加，对提高分词精度没有影响，分词处理的时间复杂度有所降低。\n\n此种方法优点是简单，易于实现。但缺点有很多：匹配速度慢；存在交集型和组合型歧义切分问题；词本身没有一个标准的定义，没有统一标准的词集；不同词典产生的歧义也不同；缺乏自学习的智能性。\n\n### [基于统计的分词方法](/基于统计的分词实现/)\n该方法的主要思想：词是稳定的组合，因此在上下文中，相邻的字同时出现的次数越多，就越有可能构成一个词。因此字与字相邻出现的概率或频率能较好地反映成词的可信度。可以对训练文本中相邻出现的各个字的组合的频度进行统计，计算它们之间的互现信息。互现信息体现了汉字之间结合关系的紧密程度。当紧密程 度高于某一个阈值时，便可以认为此字组可能构成了一个词。该方法又称为无字典分词。\n该方法所应用的主要的统计模型有：N 元文法模型（N-gram）、隐马尔可夫模型（Hiden Markov Model，HMM）、最大熵模型（ME）、条件随机场模型（Conditional Random Fields，CRF）等。\n在实际应用中此类分词算法一般是将其与基于词典的分词方法结合起来，既发挥匹配分词切分速度快、效率高的特点，又利用了无词典分词结合上下文识别生词、自动消除歧义的优点。\n\n### 基于语义的分词方法\n语义分词法引入了语义分析，对自然语言自身的语言信息进行更多的处理，如扩充转移网络法、~~知识分词语义分析法~~、邻接约束法、综合匹配法、后缀分词法、特征词库法、矩阵约束法、语法分析法等。\n\n- **扩充转移网络法。**该方法以有限状态机概念为基础。有限状态机只能识别正则语言，对有限状态机作的第一次扩充使其具有递归能力，形成递归转移网络 （RTN）。在RTN 中，弧线上的标志不仅可以是终极符（语言中的单词）或非终极符（词类），还可以调用另外的子网络名字分非终极符（如字或字串的成词条件）。这样，计算机在 运行某个子网络时，就可以调用另外的子网络，还可以递归调用。词法扩充转移网络的使用， 使分词处理和语言理解的句法处理阶段交互成为可能，并且有效地解决了汉语分词的歧义。\n\n- **矩阵约束法。**其基本思想是：先建立一个语法约束矩阵和一个语义约束矩阵， 其中元素分别表明具有某词性的词和具有另一词性的词相邻是否符合语法规则， 属于某语义类的词和属于另一词义类的词相邻是否符合逻辑，机器在切分时以之约束分词结果。\n\n### 基于理解的分词方法\n基于理解的分词方法是通过让计算机模拟人对句子的理解，达到识别词的效果。其基本思想就是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象。它通常包括三个部分：分词子系统、句法语义子系统、总控部分。在总控部分的协调下，分词子系统可以获得有关词、句子等的句法和语义信息来对分词歧义进行判断，即它模拟了人对句子的理解过程。这种分词方法需要使用大量的语言知识和信息。目前基于理解的分词方法主要有专家系统分词法和神经网络分词法等。\n\n- **专家系统分词法。**从专家系统角度把分词的知识（包括常识性分词知识与消除歧义切分的启发性知识即歧义切分规则）从实现分词过程的推理机中独立出来，使知识库的维护与推理机的实现互不干扰，从而使知识库易于维护和管理。它还具有发现交集歧义字段和多义组合歧义字段的能力和一定的自学习功能。\n\n- **神经网络分词法。**该方法是模拟人脑并行，分布处理和建立数值计算模型工作的。它将分词知识所分散隐式的方法存入神经网络内部，通过自学习和训练修改内部权值，以达到正确的分词结果，最后给出神经网络自动分词结果，如使用 LSTM、GRU 等神经网络模型等。\n\n- **神经网络与专家系统结合分词法。**该方法首先启动神经网络进行分词，当神经网络对新出现的词不能给出准确切分时，激活专家系统进行分析判断，依据知识库进行推理，得出初步分析，并启动学习机制对神经网络进行训练。该方法可以较充分发挥神经网络与专家系统二者优势，进一步提高分词效率。\n\n### 参考资料\n\n*Judikator* [简书 中文分词原理及常用Python中文分词库介绍](https://www.jianshu.com/p/5992114c97df)","content":"<p>英文中，一个单词就是一个词，而汉语中，以字为基本的书写单位，词语之间没有明显的区分标记，需要人为切分。<br>根据其特点，可以把分词算法分为四大类：</p>\n<ul>\n<li>基于规则的分词方法</li>\n<li>基于统计的分词方法</li>\n<li>基于语义的分词方法</li>\n<li>基于理解的分词方法</li>\n</ul>\n<a id=\"more\"></a>\n<img src=\"/分词原理/naotu1.png\">\n<h3 id=\"基于规则的分词方法\"><a href=\"#基于规则的分词方法\" class=\"headerlink\" title=\"基于规则的分词方法\"></a><a href=\"/基于规则的分词实现/\">基于规则的分词方法</a></h3><p>这种方法又叫作机械分词方法、基于字典的分词方法，它是按照一定的策略将待分析的汉字串与一个“充分大的”机器词典中的词条进行匹配。若在词典中找到某个字符串，则匹配成功。该方法有三个要素，即分词词典、文本扫描顺序和匹配原则。文本的扫描顺序有正向扫描、逆向扫描和双向扫描。匹配原则主要有最大匹配、最小匹配、逐词匹配和最佳匹配。</p>\n<ul>\n<li><p><strong>最大匹配法（MM）。</strong>基本思想是：假设自动分词词典中的最长词条所含汉字的个数为 i，则取被处理材料当前字符串序列中的前i个字符作为匹配字段，查找分词词典，若词典中有这样一个i字词，则匹配成功，匹配字段作为一个词被切分出来；若词典中找不到这样的一个i字词，则匹配失败，匹配字段去掉最后一个汉字，剩下的字符作为新的匹配字段，再进行匹配，如此进行下去，直到匹配成功为止。统计结果表明，该方法的错误率为 1/169.</p>\n</li>\n<li><p><strong>逆向最大匹配法（RMM）。</strong>该方法的分词过程与 MM 法相同，不同的是从句子（或文章）末尾开始处理，每次匹配不成功时去掉的是前面的一个汉字。统计结果表明，该方法的错误率为 1/245。</p>\n</li>\n<li><p><strong>逐词遍历法。</strong>把词典中的词按照由长到短递减的顺序逐字搜索整个待处理的材料，一直到把全部的词切分出来为止。不论分词词典多大，被处理的材料多么小，都得把这个分词词典匹配一遍。</p>\n</li>\n<li><p><strong>设立切分标志法。</strong>切分标志有自然和非自然之分。自然切分标志是指文章中出现的非文字符号，如标点符号等；非自然标志是利用词缀和不构成词的词（包 括单音词、复音节词以及象声词等）。设立切分标志法首先收集众多的切分标志，分词时先找出切分标志，把句子切分为一些较短的字段，再用 MM、RMM 或其它的方法进行细加工。这种方法并非真正意义上的分词方法，只是自动分词的一种前处理方式而已，它要额外消耗时间扫描切分标志，增加存储空间存放那些非 自然切分标志。</p>\n</li>\n<li><p><strong>最佳匹配法（OM）。</strong>此法分为正向的最佳匹配法和逆向的最佳匹配法，其出发点是：在词典中按词频的大小顺序排列词条，以求缩短对分词词典的检索时 间，达到最佳效果，从而降低分词的时间复杂度，加快分词速度。实质上，这种方法也不是一种纯粹意义上的分词方法，它只是一种对分词词典的组织方式。OM 法的分词词典每条词的前面必须有指明长度的数据项，所以其空间复杂度有所增加，对提高分词精度没有影响，分词处理的时间复杂度有所降低。</p>\n</li>\n</ul>\n<p>此种方法优点是简单，易于实现。但缺点有很多：匹配速度慢；存在交集型和组合型歧义切分问题；词本身没有一个标准的定义，没有统一标准的词集；不同词典产生的歧义也不同；缺乏自学习的智能性。</p>\n<h3 id=\"基于统计的分词方法\"><a href=\"#基于统计的分词方法\" class=\"headerlink\" title=\"基于统计的分词方法\"></a><a href=\"/基于统计的分词实现/\">基于统计的分词方法</a></h3><p>该方法的主要思想：词是稳定的组合，因此在上下文中，相邻的字同时出现的次数越多，就越有可能构成一个词。因此字与字相邻出现的概率或频率能较好地反映成词的可信度。可以对训练文本中相邻出现的各个字的组合的频度进行统计，计算它们之间的互现信息。互现信息体现了汉字之间结合关系的紧密程度。当紧密程 度高于某一个阈值时，便可以认为此字组可能构成了一个词。该方法又称为无字典分词。<br>该方法所应用的主要的统计模型有：N 元文法模型（N-gram）、隐马尔可夫模型（Hiden Markov Model，HMM）、最大熵模型（ME）、条件随机场模型（Conditional Random Fields，CRF）等。<br>在实际应用中此类分词算法一般是将其与基于词典的分词方法结合起来，既发挥匹配分词切分速度快、效率高的特点，又利用了无词典分词结合上下文识别生词、自动消除歧义的优点。</p>\n<h3 id=\"基于语义的分词方法\"><a href=\"#基于语义的分词方法\" class=\"headerlink\" title=\"基于语义的分词方法\"></a>基于语义的分词方法</h3><p>语义分词法引入了语义分析，对自然语言自身的语言信息进行更多的处理，如扩充转移网络法、<del>知识分词语义分析法</del>、邻接约束法、综合匹配法、后缀分词法、特征词库法、矩阵约束法、语法分析法等。</p>\n<ul>\n<li><p><strong>扩充转移网络法。</strong>该方法以有限状态机概念为基础。有限状态机只能识别正则语言，对有限状态机作的第一次扩充使其具有递归能力，形成递归转移网络 （RTN）。在RTN 中，弧线上的标志不仅可以是终极符（语言中的单词）或非终极符（词类），还可以调用另外的子网络名字分非终极符（如字或字串的成词条件）。这样，计算机在 运行某个子网络时，就可以调用另外的子网络，还可以递归调用。词法扩充转移网络的使用， 使分词处理和语言理解的句法处理阶段交互成为可能，并且有效地解决了汉语分词的歧义。</p>\n</li>\n<li><p><strong>矩阵约束法。</strong>其基本思想是：先建立一个语法约束矩阵和一个语义约束矩阵， 其中元素分别表明具有某词性的词和具有另一词性的词相邻是否符合语法规则， 属于某语义类的词和属于另一词义类的词相邻是否符合逻辑，机器在切分时以之约束分词结果。</p>\n</li>\n</ul>\n<h3 id=\"基于理解的分词方法\"><a href=\"#基于理解的分词方法\" class=\"headerlink\" title=\"基于理解的分词方法\"></a>基于理解的分词方法</h3><p>基于理解的分词方法是通过让计算机模拟人对句子的理解，达到识别词的效果。其基本思想就是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象。它通常包括三个部分：分词子系统、句法语义子系统、总控部分。在总控部分的协调下，分词子系统可以获得有关词、句子等的句法和语义信息来对分词歧义进行判断，即它模拟了人对句子的理解过程。这种分词方法需要使用大量的语言知识和信息。目前基于理解的分词方法主要有专家系统分词法和神经网络分词法等。</p>\n<ul>\n<li><p><strong>专家系统分词法。</strong>从专家系统角度把分词的知识（包括常识性分词知识与消除歧义切分的启发性知识即歧义切分规则）从实现分词过程的推理机中独立出来，使知识库的维护与推理机的实现互不干扰，从而使知识库易于维护和管理。它还具有发现交集歧义字段和多义组合歧义字段的能力和一定的自学习功能。</p>\n</li>\n<li><p><strong>神经网络分词法。</strong>该方法是模拟人脑并行，分布处理和建立数值计算模型工作的。它将分词知识所分散隐式的方法存入神经网络内部，通过自学习和训练修改内部权值，以达到正确的分词结果，最后给出神经网络自动分词结果，如使用 LSTM、GRU 等神经网络模型等。</p>\n</li>\n<li><p><strong>神经网络与专家系统结合分词法。</strong>该方法首先启动神经网络进行分词，当神经网络对新出现的词不能给出准确切分时，激活专家系统进行分析判断，依据知识库进行推理，得出初步分析，并启动学习机制对神经网络进行训练。该方法可以较充分发挥神经网络与专家系统二者优势，进一步提高分词效率。</p>\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><em>Judikator</em> <a href=\"https://www.jianshu.com/p/5992114c97df\" target=\"_blank\" rel=\"noopener\">简书 中文分词原理及常用Python中文分词库介绍</a></p>\n","slug":"分词原理","updated":"2019-05-16T04:37:40.612Z","link":"","permalink":"http://yoursite.com/分词原理/","excerpt":"英文中，一个单词就是一个词，而汉语中，以字为基本的书写单位，词语之间没有明显的区分标记，需要人为切分。根据其特点，可以把分词算法分为四大类： 基于规则的分词方法 基于统计的分词方法 基于语义的分词方法 基于理解的分词方法","categories":[{"name":"数学之美","slug":"数学之美","permalink":"http://yoursite.com/categories/数学之美/"}],"tags":[{"name":"分词","slug":"分词","permalink":"http://yoursite.com/tags/分词/"},{"name":"原理","slug":"原理","permalink":"http://yoursite.com/tags/原理/"}]}]}